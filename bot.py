#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
import os
from telegram.ext.dispatcher import run_async
import psycopg2

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

conn = psycopg2.connect(dbname = 'daqpsemmol11kn', user = 'fnwjyuhqrjdbcv', password = '4ae63588868e2423ddb7cc3bd4e71ae5892179b86dca5a90272b747aa933bac9', host = 'ec2-46-137-75-170.eu-west-1.compute.amazonaws.com')
cursor = conn.cursor()

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

CHOOSING = range(1)

bot_id = '1072920015'


def adminctrl(update, context):
    for bot_id in bot.get_chat_administrators(update.message.chat_id):
        return True
    return False


@run_async
def start(update, context):
    update.message.reply_text(
        '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! üëã

–í–∞–º —Å–∫—É—á–Ω–æ? –ò—â–µ—Ç–µ –∫–∞–∫ –±—ã —Å–µ–±—è —Ä–∞–∑–≤–ª–µ—á—å, —Å –∫–µ–º –ø–æ–¥–∏—Å–∫—É—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä—å—ë–∑–Ω—ã–µ —Ç–µ–º—ã –∏–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ª—é–¥—å–º–∏?

–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã —Å–æ–∑–¥–∞–ª–∏ –±–æ—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ –ª—é–¥–µ–π —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.

–£ –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–∞—Ç –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å. –ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞–π–¥—ë—Ç–µ - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—à—É –±–∞–∑—É, –∞ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –ø—Ä–∏–≤–ª–µ—á—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤!

–ü–æ–¥–±–æ—Ä —á–∞—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º - /filters
–°–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç - /random
–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —á–∞—Ç - /add''')


@run_async
def filteredChats(update, context):
    reply_keyboard = [['üòé –û–±—â–µ–Ω–∏–µ', 'üëæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ'], ['üßê –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ', '‚≠êÔ∏è –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —á–∞—Ç—ã'], ['–û—Ç–º–µ–Ω–∞']]
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))

    return CHOOSING


@run_async
def chatsFlood(update, context):
    try:
        text = ''
        cursor.execute('SELECT name, link FROM chats WHERE category = "flood"')
        flood = cursor.fetchall()

        for info in flood:
            text += f'\n<b>{info[0]}</b> - <a href="{info[1]}">–≤–æ–π—Ç–∏</a>.'

        update.message.reply_text(text, parse_mode='HTML')

        return CHOOSING
    except:
        update.message.reply_text('–ü–æ–∫–∞ —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–∫–∏—Ö —á–∞—Ç–æ–≤.')

        return ConversationHandler.END


@run_async
def chatsGames(update, context):
    try:
        text = ''
        cursor.execute('SELECT name, link FROM chats WHERE category = "games"')
        games = cursor.fetchall()

        for info in games:
            text += f'\n<b>{info[0]}</b> - <a href="{info[1]}">–≤–æ–π—Ç–∏</a>.'

        update.message.reply_text(text, parse_mode='HTML')

        return CHOOSING
    except:
        update.message.reply_text('–ü–æ–∫–∞ —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–∫–∏—Ö —á–∞—Ç–æ–≤.')

        return ConversationHandler.END


@run_async
def chatsDiscussion(update, context):
    try:
        text = ''
        cursor.execute('SELECT name, link FROM chats WHERE category = "discussion"')
        discussion = cursor.fetchall()

        for info in discussion:
            text += f'\n<b>{info[0]}</b> - <a href="{info[1]}">–≤–æ–π—Ç–∏</a>.'

        update.message.reply_text(text, parse_mode='HTML')

        return CHOOSING
    except:
        update.message.reply_text('–ü–æ–∫–∞ —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–∫–∏—Ö —á–∞—Ç–æ–≤.')

        return ConversationHandler.END


@run_async
def chatsPartners(update, context):
    try:
        text = ''
        cursor.execute('SELECT name, link FROM chats WHERE partners = 1')
        partners = cursor.fetchall()

        for info in partners:
            text += f'\n<b>{info[0]}</b> - <a href="{info[1]}">–≤–æ–π—Ç–∏</a>.'

        update.message.reply_text(text, parse_mode='HTML')

        return CHOOSING
    except:
        update.message.reply_text('–ü–æ–∫–∞ —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–∫–∏—Ö —á–∞—Ç–æ–≤.')

        return ConversationHandler.END


@run_async
def randomChat(update, context):
    cursor.execute('SELECT name, link FROM chats ORDER BY random() LIMIT 1')
    random = cursor.fetchall()

    update.message.reply_text(f'<b>{random[0]}</b> - <a href="{random[1]}">–≤–æ–π—Ç–∏</a>.', parse_mode='HTML')


@run_async
def addChat(update, context):
    update.message.reply_text('–ü–æ–∫–∞ –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å @daaetoya –∏–ª–∏ @aotkh —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —á–∞—Ç.')


@run_async
def addChatToDB(update, context):
    if '-' not in str(update.message.chat.id):
        update.message.reply_text('–î–æ–±–∞–≤–ª—è—Ç—å –≤ –±–∞–∑—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã!')
    elif ('flood' not in update.message.text) and ('games' not in update.message.text) and ('discussion' not in update.message.text):
        update.message.reply_text('–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Ç–∞.')
    elif ('flood' in update.message.text) or ('games' in update.message.text) or ('discussion' in update.message.text):
        chat_id = update.message.chat.id
        name = update.message.chat.title
        if bool(update.message.chat.username):
            link = "https://t.me/" + update.message.chat.username
            print('1')
        elif adminctrl(update, context):
            if bool(update.message.chat.invite_link):
                link = update.message.chat.invite_link
                print('2')
            else:
                link = context.bot.exportChatInviteLink(chat_id)
                print('3')
        print('4')
        print(context.bot.id)
        category = context.args[0]
        cursor.execute('INSERT INTO chats (id, name, link, category, partners) VALUES (%s, %s, %s, %s, 0)', (chat_id, name, link, category,))
    else:
        update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')


@run_async
def cancel(update, context):
    update.message.reply_text('–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞–Ω–æ–≤–æ - –Ω–∞–ø–∏—à–∏—Ç–µ /filters.',
                              reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    # updater = Updater("TOKEN", use_context=True)
    updater = Updater(os.environ['token'], use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('random', randomChat))
    dp.add_handler(CommandHandler('add', addChat))
    dp.add_handler(CommandHandler('addchat', addChatToDB, filters=Filters.user(username='@daaetoya')|Filters.user(username='@aotkh')))

    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('filters', filteredChats)],

        states={
            CHOOSING: [MessageHandler(Filters.regex('^üòé –û–±—â–µ–Ω–∏–µ$'), chatsFlood),
                     MessageHandler(Filters.regex('^üëæ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ$'), chatsGames),
                     MessageHandler(Filters.regex('^üßê –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ$'), chatsDiscussion),
                     MessageHandler(Filters.regex('^‚≠êÔ∏è –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —á–∞—Ç—ã$'), chatsPartners)]
        },

        fallbacks=[[MessageHandler(Filters.regex('^–û—Ç–º–µ–Ω–∞$'), cancel)]]
    )

    dp.add_handler(conv_handler)

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
