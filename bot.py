#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.
#
# THIS EXAMPLE HAS BEEN UPDATED TO WORK WITH THE BETA VERSION 12 OF PYTHON-TELEGRAM-BOT.
# If you're still using version 11.1.0, please see the examples at
# https://github.com/python-telegram-bot/python-telegram-bot/tree/v11.1.0/examples


"""
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic inline bot example. Applies different text transformations.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import logging
import random
import os
from telegram.ext.dispatcher import run_async
import psycopg2


from telegram import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler


# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

ID, MESSAGE, TOTAL = range(3)


members = 'creator, administrator, member'
memberslist = members.split(', ')


conn = psycopg2.connect(dbname='d3p95g4d436dvm', user='gogkpkgabilgaj', 
                        password='984caca9804921aaba645e063270277f0aca1cf316578740c29104822e91254c', host='ec2-54-228-252-67.eu-west-1.compute.amazonaws.com')
cursor = conn.cursor()

bot_link = 'telegram.me/therozbiynukbot'
bot_username = '@therozbiynukbot'
channel_username = '@mdkcasino'


# Define a few command handlers. These usually take the two arguments bot and
# update. Error handlers also receive the raised TelegramError object in error.
@run_async
def start(update, context):
	"""Send a message when the command /start is issued."""
	ids = update.message.from_user.id
	fullname = update.message.from_user.full_name
	usern = update.message.from_user.username
	username = usern.lower()
	# balance_Query = 
	id_Query = 'select "balance" from userz where id = %s'
	cursor.execute(id_Query, (ids,))
	balance = cursor.fetchone()
	error = "None"	
	if error not in str(balance):
		pass
	elif (error in str(fullname) or error in str(username)):
		update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!

–ó–∞–ø–æ–º–Ω–∏, –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–ª—É–±–∞ - –≤–µ—Å–µ–ª–∏—Å—å. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª ;)''')
		update.message.reply_text('''*–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ?*
–ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å —É –Ω–∞—Å, –ø–æ–ª—è _Name_ –∏ _Username_ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.
–ò—Å–ø—Ä–∞–≤—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ /reg :)''', parse_mode='MARKDOWN')
	else:
		update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!

–ó–∞–ø–æ–º–Ω–∏, –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–ª—É–±–∞ - –≤–µ—Å–µ–ª–∏—Å—å. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª ;)''')
		registration_Query = "INSERT INTO userz (id, fullname, username, balance) VALUES (%s, %s, %s, 0)"
		cursor.execute(registration_Query, (ids, fullname, username,))
		conn.commit()
		update.message.reply_text('*–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ?*\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏ /info ;)')

	user_says = " ".join(context.args)
	if user_says is not "":
		invoker = update.message.from_user.id
		error = 'None'
		cursor.execute('SELECT refferrer FROM userz WHERE id = %s', (invoker,))
		promo_used = cursor.fetchone()
		cursor.execute('SELECT id FROM userz')
		totalb = cursor.fetchall()
		if user_says not in str(totalb):
			update.message.reply_text('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
			update.message.reply_text(totalb)
		elif user_says in str(invoker):
			update.message.reply_text('–°–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!')
		elif error not in str(promo_used):
			update.message.reply_text('–£–ø—Å–∏, –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑.')
		else:
			cursor.execute('UPDATE userz SET balance = balance + 20 WHERE id = %s', (user_says,))
			cursor.execute('UPDATE userz SET reffs = reffs + 1, balance = balance + 100, refferrer = %s WHERE id = %s', (user_says, invoker,))
			update.message.reply_text('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. (+100 –º–æ–Ω–µ—Ç —Ç–µ–±–µ –∏ +20 –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–∞)')
			conn.commit()
	else:
		pass


def registration(update, context):
	ids = update.message.from_user.id
	fullname = update.message.from_user.full_name
	usern = update.message.from_user.username
	username = usern.lower()
	# balance_Query = 
	id_Query = 'select "balance" from userz where id = %s'
	cursor.execute(id_Query, (ids,))
	balance = cursor.fetchone()
	error = "None"	
	if error not in str(balance):
		update.message.reply_text('*–û—à–∏–±–∫–∞!* –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!', parse_mode='MARKDOWN')
	elif (error in str(fullname) or error in str(username)):
		update.message.reply_text('*–û—à–∏–±–∫–∞!* _Name_ –∏–ª–∏ _Username_ –∏–º–µ—é—Ç –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', parse_mode='MARKDOWN')
	else:
		registration_Query = "INSERT INTO userz (id, fullname, username, balance) VALUES (%s, %s, %s, 0)"
		cursor.execute(registration_Query, (ids, fullname, username,))
		conn.commit()
		update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')


def getInfo(update, context):
	usrid = update.message.from_user.id
	cursor.execute('SELECT id FROM userz')
	all_users = cursor.fetchall()
	try:
		target = update.message.reply_to_message.from_user.id
		if '/info' in update.message.reply_to_message.text:
			pass
		elif str(target) in str(all_users):
			target_info_Query = "select * from userz where id = %s"
			cursor.execute(target_info_Query, (target,))
			target_info = cursor.fetchall()
			for row in target_info:
				update.message.reply_text(f"""
*Name*: {row[1]}
*Username*: {row[2]}
*Balance*: {row[3]}
*ID*: {row[0]}""", parse_mode="MARKDOWN")

				return

		else:
			update.message.reply_text('–û—à–∏–±–∫–∞! –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

			return

	except:
		pass

	user_info_Query = "select * from userz where id = %s"

	cursor.execute(user_info_Query, (usrid,))
	info = cursor.fetchall()
	for row in info:
		update.message.reply_text(f"""
*Name*: {row[1]}
*Username*: {row[2]}
*Balance*: {row[3]}
*ID*: {row[0]}""", parse_mode="MARKDOWN")


def help(update, context):
    """Send a message when the command /help is issued."""
    update.message.reply_text('Help!')
    
    
# def echo(update, context):
#     """Send a message when the command /help is issued."""
#     update.message.reply_text('''–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–Ω–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—Ä–∏–¥–µ–ª–∞–ª–∏, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º ;)\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:

# /coinflip - —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å (1—Ö1)
# /roulette - *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...*    	
# /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
# /promo - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
# /help - –ø–æ–º–æ—â—å –∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è''', parse_mode='MARKDOWN')


def getPromo(update, context):
	ids = update.message.from_user.id
	cursor.execute('SELECT reffs FROM userz where id = %s', (ids,))
	reffs = cursor.fetchone()
	cursor.execute('SELECT refferrer FROM userz where id = %s', (ids,))
	ref = cursor.fetchone()
	update.message.reply_text(f'–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {ids}\n–ò—Å–ø. –ø—Ä–æ–º–æ–∫–æ–¥: {ref[0]}\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª–æ–≤: {reffs[0]}\n\n–ß—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥, –µ–º—É/–µ–π –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É:')
	update.message.reply_text(f"/start {ids}")

@run_async  
def getId(update, context):
    ids = update.message.chat.id
    context.bot.deleteMessage(chat_id=update.message.chat.id, message_id=update.message.message_id)
    context.bot.sendMessage(chat_id=update.message.chat.id, text=f'*ID* –≥—Ä—É–ø–ø—ã: {ids}\n–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∑–Ω–∞–∫–∞ "-"!', parse_mode='MARKDOWN')


@run_async
def coinflip(update, context):
	context.user_data['game'] = 'coinflip'
	inv_user_id = update.message.from_user.id
	user_balance = "select balance from userz where id = %s"
	cursor.execute(user_balance, (inv_user_id,))
	balance = cursor.fetchone()
	update.message.reply_text(f'`Coinflip` üåï\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{balance[0]}* –º–æ–Ω–µ—Ç\n\n(*min*: 100, *max*: 100000)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='MARKDOWN')

	return TOTAL


@run_async
def roulette(update, context):
	context.user_data['game'] = 'roulette'
	inv_user_id = update.message.from_user.id
	user_balance = "select balance from userz where id = %s"
	cursor.execute(user_balance, (inv_user_id,))
	balance = cursor.fetchone()
	update.message.reply_text(f'`Roulette` üé∞\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{balance[0]}* –º–æ–Ω–µ—Ç\n\n(*min*: 100, *max*: 100000)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='MARKDOWN')

	return TOTAL


@run_async
def Total(update, context):
	game = context.user_data['game']
	invoker = update.message.from_user.full_name
	inv_user = update.message.from_user.username
	inv_user_id = update.message.from_user.id
	user_balance = "select balance from userz where id = %s"
	cursor.execute(user_balance, (inv_user_id,))
	balance = cursor.fetchone()
	total = update.message.text
	try:
		summ = int(total)
	except:
		update.message.reply_text('–ñ–∞–ª—å, –Ω–æ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –º–æ–Ω–µ—Ç.\n–î–∞, –Ω–∞—Ç—É—Ä–æ–π —Ç–æ–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º :(\n\n–í–≤–µ–¥–∏ *—Ü–µ–ª–æ–µ* —á–∏—Å–ª–æ.\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='MARKDOWN')

		return TOTAL

	if summ < 100:
		update.message.reply_text('–¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')

		return ConversationHandler.END
	elif summ > 100000:
		update.message.reply_text('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –º–æ–∂–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ ;)')

		return ConversationHandler.END
	elif summ > int(balance[0]):
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.')

		return ConversationHandler.END
	elif (summ >= 100) and (summ <= 100000) and game == 'coinflip':
		keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ü§†', callback_data=f'coinflip {inv_user_id} {summ}')],
					[InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üëæ', url=bot_link)]]
		reply_markup = InlineKeyboardMarkup(keyboard)
		context.bot.send_message(chat_id=channel_username, text=f'`Coinflip` üåï\n\n*–°–æ–∑–¥–∞—Ç–µ–ª—å*: {invoker} (@{inv_user})\n*–°—Ç–∞–≤–∫–∞*: {summ} –º–æ–Ω–µ—Ç', parse_mode='MARKDOWN', reply_markup=reply_markup)
		update.message.reply_text('–î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.')
		
		return ConversationHandler.END
	elif (summ >= 100) and (summ <= 100000) and game == 'roulette':
		keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ü§†', callback_data=f'roulette {inv_user_id} {summ}')],
					[InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üëæ', url=bot_link)]]
		reply_markup = InlineKeyboardMarkup(keyboard)
		context.bot.send_message(chat_id=channel_username, text=f'`Roulette` üé∞\n\n*–°–æ–∑–¥–∞—Ç–µ–ª—å*: {invoker} (@{inv_user})\n*–°—Ç–∞–≤–∫–∞*: {summ} –º–æ–Ω–µ—Ç\n\n*–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤*: 1/10', parse_mode='MARKDOWN', reply_markup=reply_markup)
		update.message.reply_text('–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤.')
		context.user_data['roulette_bet'] = summ
		context.user_data['roulette_id'] = inv_user_id
		context.user_data['participants'] = 1
		
		return ConversationHandler.END
	else:
		update.message.reply_text('_Error 404_. –ö–∞–∫ —Ç—ã –≤–æ–æ–±—â–µ —ç—Ç–æ —Å–¥–µ–ª—è–ª—ä? :/\n–°–∫–∏–Ω—å —Å–∫—Ä–∏–Ω —Å—é–¥–∞: @daaetoya –∏ –ø–æ–ª—É—á–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ *1000* –º–æ–Ω–µ—Ç.', parse_mode='MARKDOWN')

		return ConversationHandler.END


@run_async
def button(update, context):
	cursor.execute('SELECT id FROM userz')
	all_users = cursor.fetchall()
	keyboard = [[InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', url=bot_link)]]
	reply_markup = InlineKeyboardMarkup(keyboard)
	query = update.callback_query
	betinfo = query.data.split()
	cursor.execute('SELECT username FROM userz WHERE id = %s', (betinfo[1],))
	participant1 = cursor.fetchone()
	cursor.execute('SELECT username FROM userz WHERE id = %s', (query.from_user.id,))
	participant2 = cursor.fetchone()
	betsumm = betinfo[2]
	total = int(betsumm)*1.9
	inv_user_id = context.user_data['roulette_id']
	summ = context.user_data['roulette_bet']
	keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ü§†', callback_data=f'roulette {inv_user_id} {summ}')],
					[InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üëæ', url=bot_link)]]
	reply_markup = InlineKeyboardMarkup(keyboard)

	if str(query.from_user.id) not in str(all_users):
		query.answer(f'–û—à–∏–±–∫–∞!\n\n–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {bot_username}', show_alert=True, parse_mode='MARKDOWN')

		return
	elif 'coinflip' in query.data:
		cf_participants = [participant1[0], participant2[0]]
		winner = random.choice(cf_participants)
		query.edit_message_text(f'`Coinflip`\n\n@{participant1[0]} *vs* @{participant2[0]}\n\n*–ü–æ–±–µ–¥–∏—Ç–µ–ª—å*: @{winner}!\n*–í—ã–∏–≥—Ä—ã—à*: `{int(total)}` –º–æ–Ω–µ—Ç!', parse_mode='MARKDOWN', reply_markup=reply_markup)
	elif 'roulette' in query.data:
		participants = context.user_data['participants']
		if participants < 9:
			participants += 1
			query.edit_message_text(f'*–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤*: {participants}/10', parse_mode='MARKDOWN', reply_markup=reply_markup)
		elif participants == 9:
			query.edit_message_text('–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º!')
		else:
			query.edit_message_text('–û—à–∏–±–∫–∞! –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.')
	else:
		query.edit_message_text('Error')
	

@run_async
def anon(update, context):
    userid = update.message.from_user.id
    member1 = context.bot.get_chat_member(channel_username, userid)
    if member1.status in memberslist:
    	update.message.reply_text(
        	'''–ù–∞–∫–æ–Ω–µ—Ü —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ–µ ;)

–î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ *ID* —á–∞—Ç–∞, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å.
*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID?* –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –∫–æ–º–º–∞–Ω–¥—É /id.
_–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –±–æ—Ç –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ —É–¥–∞–ª–∏—Ç —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∏–∫—Ç–æ –Ω–µ —Å–ø–∞–ª–∏—Ç._

*P.S.* –¢—ã –∂–µ –≤–∫—É—Ä—Å–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, —è –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ? –ö–æ–Ω–µ—á–Ω–æ, –≤–∫—É—Ä—Å–µ.

/cancel - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.''',
        	parse_mode='MARKDOWN')
    	context.user_data['user'] = update.message.from_user.full_name

    	return ID
    else:
        update.message.reply_text(f'–ù–µ–Ω–µ–Ω–µ, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞: {channel_username}')
	
        return ConversationHandler.END


@run_async
def anonId(update, context):
    context.user_data['groupid'] = update.message.text
    update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')

    return MESSAGE


@run_async
def anonMessage(update, context):
    groupid = context.user_data['groupid']
    user = context.user_data['user']
    message = update.message.text
    try:
        context.bot.sendMessage(chat_id=f'-{groupid}', text=f'*–ö–∞–∫–æ–π-—Ç–æ –∞–Ω–æ–Ω –Ω–∞–ø–∏—Å–∞–ª(-–∞):*\n{message}', parse_mode='MARKDOWN')
        context.bot.sendMessage(chat_id=-1001184148918, text=f'*{user} –Ω–∞–ø–∏—Å–∞–ª(-–∞):*\n{message}', parse_mode='MARKDOWN')

        return ConversationHandler.END
    except:
        update.message.reply_text(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(\n–¢—ã —Ç–æ—á–Ω–æ —É–¥–∞–ª–∏–ª(-–∞) –∑–Ω–∞–∫ "-" –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏?')

        return ConversationHandler.END


@run_async
def cancel(update, context):
    update.message.reply_text('–≠—Ö! –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:(')

    return ConversationHandler.END


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    # TOKEN='972573533:AAEcygddWIIEjK7YzEu3PIy5vdlPRUDCASs'
    # REQUEST_KWARGS={
    # 'proxy_url': 'socks5h://188.226.141.211:1080',}
    # updater = Updater(TOKEN, request_kwargs=REQUEST_KWARGS, use_context=True)
    updater = Updater(os.environ['token'], use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    # dp.add_handler(MessageHandler(Filters.text, echo))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("promo", getPromo))
    dp.add_handler(CommandHandler("id", getId))
    dp.add_handler(CommandHandler("info", getInfo))
    dp.add_handler(CommandHandler("reg", registration))
    dp.add_handler(CallbackQueryHandler(button))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("anon", anon),
        			  CommandHandler("coinflip", coinflip),
        			  CommandHandler("roulette", roulette)],

    states={
           	ID: [MessageHandler(Filters.text, anonId)],
           	MESSAGE: [MessageHandler(Filters.text, anonMessage)],
           	TOTAL: [MessageHandler(Filters.text, Total)]
        },

        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Block until the user presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
