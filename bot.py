#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler, CallbackQueryHandler, PreCheckoutQueryHandler)

import logging
import psycopg2
import config
import os
import datetime
from importlib import reload

conn = psycopg2.connect(dbname=os.environ['dbname'], user=os.environ['user'], password=os.environ['password'], host=os.environ['host'])

cursor = conn.cursor()

now = datetime.datetime.now()

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

(CHOOSING, FRST, PREFRST, OK, UN, UP, PR, TYPING_REPLY,
 PROMOCODE, PAYMENT, CHECKOUT, SUC_PAYMENT, PRFL) = range(13)

reply_keyboard = [['–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', '–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'],
                  ['–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º'],
                  ['–°–≤—è–∑—å —Å –Ω–∞–º–∏', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
first_keyboard = [['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']]
first = ReplyKeyboardMarkup(first_keyboard, one_time_keyboard=True, resize_keyboard=True)

commands = ('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥,'
            '–°–≤—è–∑—å —Å –Ω–∞–º–∏, –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º, –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –Ø –±–ª–æ–≥–≥–µ—Ä, –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
ignorelist = commands.split(', ')
members = 'creator, administrator, member'
memberslist = members.split(', ')
back = '–ù–∞–∑–∞–¥'


def start(bot, update, user_data):
    name = update.message.from_user.full_name
    update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {name}!')
    nick = update.message.from_user.username
    userid = update.message.from_user.id
    user_data['usrid'] = userid
    user_data['username'] = nick
    user_data['name'] = name
    member = bot.get_chat_member('@bigbetz', userid)
    if member.status in memberslist:
        update.message.reply_text('''–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç!
–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ —á—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º ;)''', reply_markup=markup)
        cursor.execute("SELECT id FROM users WHERE id=%s", (userid,))
        result = "%s" % cursor.fetchone()
        if result == "None":
            cursor.execute("INSERT INTO users (nickname, namesurname, id) VALUES (%s, %s, %s)", (nick, name, userid))
            conn.commit()
        else:
            pass

        return CHOOSING
    else:
        update.message.reply_text(
            '–î–ª—è –Ω–∞—á–∞–ª–∞, –±—É–¥—å –¥–æ–±—Ä(-–∞), –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª: @bigbetz', reply_markup=first)

        return FRST


def first_time(bot, update, user_data):
    userid = user_data['usrid']
    nick = user_data['username']
    name = user_data['name']
    member = bot.get_chat_member('@bigbetz', userid)
    if member.status in memberslist:
        update.message.reply_text('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! :)', reply_markup=markup)
        update.message.reply_text('''–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç!
–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ —á—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º ;)''', reply_markup=markup)
        cursor.execute("SELECT id FROM users WHERE id=%s", (userid,))
        result = "%s" % cursor.fetchone()
        if result == "None":
            cursor.execute("INSERT INTO users (nickname, namesurname, id) VALUES (%s, %s, %s)", (nick, name, userid))
            conn.commit()
        else:
            pass

        return CHOOSING
    else:
        update.message.reply_text('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å) –Ω–∞ –∫–∞–Ω–∞–ª @bigbetz '
                                  '–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ.', reply_markup=first)

        return FRST


def delete_promos(bot, update):
    cursor.execute("UPDATE users SET (promo, mypromo) VALUES (NULL, NULL) WHERE id=391206263")
    update.message.reply_text("–ì–æ—Ç–æ–≤–æ.")
      
      
def add_partner(bot, update, user_data):
    reload(config)
    user = str(user_data['usrid'])
    if user in config.admin:
        update.message.reply_text('–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º. (–ë–µ–∑ @)')

        return UN
    else:
        update.message.reply_text('–¢—ã –Ω–µ –∞–¥–º–∏–Ω.')

        return CHOOSING


def message(bot, update, user_data):
    reload(config)
    user = str(user_data['usrid'])
    if user in config.admin:
        update.message.reply_text('–í–≤–µ–¥–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ.')

        return PR
    else:
        update.message.reply_text('–¢—ã –Ω–µ –∞–¥–º–∏–Ω.')

        return CHOOSING


def message_pr(bot, update):
    sends = -1
    prediction = update.message.text
    cursor.execute("SELECT id FROM users WHERE free_sub = 1")
    while True:
        chat_id = '%s' % cursor.fetchone()
        sends += 1
        if chat_id == 'None':
            break
        bot.send_message(text=prediction, chat_id=chat_id)
    update.message.reply_text(f'–ö–æ–ª-–≤–æ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–∏–∫—Ç–æ–≤: {sends}')

    return CHOOSING


def partner_un(bot, update, user_data):
    username = update.message.text
    update.message.reply_text('@' + username)
    user_data['partner'] = username
    update.message.reply_text('–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @' + username)

    return UP


def partner_promo(bot, update, user_data):
    promocode = update.message.text
    username = user_data['partner']
    name = user_data['name']
    update.message.reply_text(promocode)
    cursor.execute("UPDATE users SET mypromo = %s WHERE nickname=%s", (promocode, username))
    update.message.reply_text('–ì–æ—Ç–æ–≤–æ!')
    conn.commit()
    cursor.execute("SELECT id FROM users WHERE nickname=%s", (username,))
    chatid = "%s" % cursor.fetchone()
    try:
        bot.send_message(
            text=f'''{name}, –º—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥. –£–∑–Ω–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ BIG Betz.''', chat_id=int(chatid))
    except:
        bot.send_message(
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chatid} ({username}) –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.', chat_id='@bigbetz_orders')

    return CHOOSING


def profile(bot, update):
    reply_keyboardz = [['–ù–∞–∑–∞–¥']]
    state = ReplyKeyboardMarkup(reply_keyboardz, one_time_keyboard=True, resize_keyboard=True)
    keyboard = [[InlineKeyboardButton("–ú–æ–π –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")],
                [InlineKeyboardButton("–°—á—ë—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="promo_patrons")],
                [InlineKeyboardButton("–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                 InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.', reply_markup=state)
    update.message.reply_text('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=reply_markup)

    return PRFL


def profile_action(bot, update, user_data):
    IDS = user_data['usrid']
    cursor.execute("SELECT mypromo FROM users WHERE id=%s", (IDS,))
    promocode = "%s" % cursor.fetchone()
    query = update.callback_query

    if query.data == "promocode":
        if promocode == "None":
            query.answer("–¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.")

            return PRFL
        else:
            query.answer("–ü—Ä–æ–º–æ–∫–æ–¥: " + promocode)

            return PRFL
    elif query.data == "promo_patrons":
        cursor.execute("SELECT COUNT(*) FROM users WHERE promo=%s", (promocode,))
        patrons = "%s" % cursor.fetchone()
        query.answer("–£ —Ç–µ–±—è " + patrons + " —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

        return PRFL
    elif query.data == "balance":
        cursor.execute("SELECT earnings FROM users WHERE id=%s", (IDS,))
        earnings = "%s" % cursor.fetchone()
        query.answer("–ö –≤—ã–ø–ª–∞—Ç–µ: " + earnings + " —Ä—É–±–ª–µ–π")
    elif query.data == "stats":
        query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üëá")
        stats(bot, update, user_data)

        return PRFL
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞!")

        return PRFL


def contact_us(bot, update):
    update.message.reply_text("""–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å: @daaetoya
–°—Ä–∞–∑—É —É—Ç–æ—á–Ω—è–π—Ç–µ *–ø—Ä–∏—á–∏–Ω—É* –æ–±—Ä–∞—â–µ–Ω–∏—è.
*–í–∞–∂–Ω–æ!* –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–∞–º–∏: #–†–µ–∫–ª–∞–º–∞, #–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, #–ë–∞–≥.""", parse_mode='MARKDOWN'
                              , reply_markup=markup)

    return CHOOSING


def partnership(bot, update, user_data):
    ID = user_data['usrid']
    cursor.execute('SELECT is_partner FROM users WHERE id=%s', (ID,))
    ppartner = '%s' % cursor.fetchone()
    if ppartner == '1':
        update.message.reply_text('–¢—ã —É–∂–µ —è–≤–ª—è–µ—à—å—Å—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.')

        return CHOOSING
    else:
        update.message.reply_text('–£–∫–∞–∂–∏ —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ (–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: 4).')

        return OK


def confirmation(bot, update, user_data):
    text = update.message.text
    cursor.execute("SELECT mypromo FROM users WHERE mypromo IS NOT NULL")
    promolist = "%s" % cursor.fetchall()
    if text in ignorelist:
        update.message.reply_text('–°–µ–π—á–∞—Å –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É.')
        pass

        return OK
    elif text in back:
        update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëæ', reply_markup=markup)

        return CHOOSING
    elif text in promolist:
        update.message.reply_text('–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –µ—Å—Ç—å! –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π.')
        
        return OK
    else:
        update.message.reply_text('''–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä BIG Betz üòé''', reply_markup=markup)
        User = user_data['usrid']
        Nick = user_data['username']
        Promo = update.message.text
        cursor.execute("UPDATE users SET mypromo = %s WHERE id=%s", (Promo, User))
        cursor.execute("UPDATE users SET is_partner = 1 WHERE id=%s", (User,))
        conn.commit()
        bot.send_message(
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {User} (@{Nick}) —Å—Ç–∞–ª –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º. Promo: {Promo}', chat_id='@bigbetz_orders')

        return CHOOSING


def free_subscription(bot, update, user_data):
    usrid = user_data['usrid']
    cursor.execute('SELECT free_sub FROM users WHERE id = %s', (usrid,))
    if_sub = "%s" % cursor.fetchone()
    if if_sub == '0':
        update.message.reply_text('–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å) –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.')
        cursor.execute("UPDATE users SET free_sub = 1 WHERE id=%s", (usrid,))
    elif if_sub == '1':
        update.message.reply_text('–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å) –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.')
        cursor.execute("UPDATE users SET free_sub = 0 WHERE id=%s", (usrid,))
    else:
        update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..')
    conn.commit()

    return CHOOSING


def custom_promo(bot, update, user_data):
    IDS = user_data['usrid']
    reply_keyboardz = [['–ù–∞–∑–∞–¥']]
    state = ReplyKeyboardMarkup(reply_keyboardz, one_time_keyboard=True, resize_keyboard=True)
    cursor.execute("SELECT promo FROM users WHERE id=%s", (IDS,))
    promocode = "%s" % cursor.fetchone()
    if promocode == "None":
        update.message.reply_text('–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 20%.', reply_markup=state)

        return PROMOCODE
    else:
        update.message.reply_text('–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(-–∞) –ø—Ä–æ–º–æ–∫–æ–¥ :(')

        return CHOOSING


def promo(bot, update, user_data):
    code = update.message.text
    user = user_data['usrid']
    cursor.execute("SELECT mypromo FROM users WHERE id=%s", (user,))
    ownpromo = "%s" % cursor.fetchone()
    cursor.execute("SELECT mypromo FROM users WHERE mypromo IS NOT NULL")
    promolist = "%s" % cursor.fetchall()
    if code in ownpromo:
        update.message.reply_text("–°–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è! –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π.")
        
        return PROMOCODE
    elif code in promolist:
        update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!")
        update.message.reply_text("–°–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–ª–∞—Ç—É - 20%", reply_markup=markup)
        cursor.execute("UPDATE users SET code_active = 1 WHERE id=%s", (user,))
        cursor.execute("UPDATE users SET promo = %s WHERE id=%s", (code, user))
        cursor.execute("SELECT id FROM users WHERE mypromo = %s", (code,))
        target = "%s" % cursor.fetchone()
        cursor.execute("SELECT nickname FROM users WHERE mypromo = %s", (code,))
        username = "%s" % cursor.fetchone()
        try:
            bot.send_message(
                text='–¢–æ–ª—å–∫–æ —á—Ç–æ 1 –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥.', chat_id=int(target))
        except:
            bot.send_message(
                text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} (@{username}) –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ.', chat_id='@bigbetz_orders')
        conn.commit()

        return CHOOSING
    elif code in back:
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëæ", reply_markup=markup)

        return CHOOSING
    else:
        update.message.reply_text("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π.")

        return PROMOCODE


def custom_choice(bot, update, user_data):
    reply_keyboardz = [['–ù–∞–∑–∞–¥']]
    state = ReplyKeyboardMarkup(reply_keyboardz, one_time_keyboard=True, resize_keyboard=True)
    keyboard = [[InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="1"),
                 InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data="2")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="3")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('''–û—Ç–ª–∏—á–Ω–æ üòé''', reply_markup=state)
    update.message.reply_text('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ üëá', reply_markup=reply_markup)

    return TYPING_REPLY


def received_information(bot, update, user_data):
    query = update.callback_query
    user_data['choice'] = query.data
    IDS = user_data['usrid']
    # text = update.message.text
    cursor.execute("SELECT code_active FROM users WHERE id = %s", (IDS,))
    code_active = "%s" % cursor.fetchone()
    if code_active == "1":
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ (–°–∫–∏–¥–∫–∞ 20%)", callback_data="–û–ø–ª–∞—Ç–∞")]]
    else:
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="–û–ø–ª–∞—Ç–∞")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        cursor.execute(
            "SELECT tariff, price, patrons FROM betsdb WHERE id=%s", (query.data,))

        bot.edit_message_text(text='üëá',
                              chat_id=query.message.chat_id,
                              message_id=query.message.message_id)

        query.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üòé')

        update.effective_message.reply_text('''*–¢–∞—Ä–∏—Ñ:* %s
*–¶–µ–Ω–∞:* %s —Ä—É–±–ª–µ–π
*–£–∂–µ –∫—É–ø–∏–ª–∏:* %s —á–µ–ª–æ–≤–µ–∫''' % cursor.fetchone(), parse_mode='MARKDOWN', reply_markup=reply_markup)
    except:
        update.effective_message.reply_text(f"""*–û—à–∏–±–∫–∞!* –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..""", parse_mode='MARKDOWN')

        return TYPING_REPLY

    return PAYMENT


def button(bot, update, user_data):
    IDS = user_data['choice']
    user = user_data['usrid']
    try:
        cursor.execute("SELECT code_active FROM users WHERE id = %s", (user,))
        code_active = "%s" % cursor.fetchone()
        chat_id = update.effective_message.chat_id
        cursor.execute("SELECT tariff FROM betsdb WHERE id=%s", (IDS,))
        tariff = "%s" % cursor.fetchone()
        title = tariff
        description = "BIG Bets Company"
        # select a payload just for you to recognize its the donation from your bot
        payload = "Custom-Payload"
        # In order to get a provider_token see https://core.telegram.org/bots/payments#getting-a-token
        provider_token = os.environ['provider_token']
        start_parameter = "test-payment"
        currency = "RUB"
        # price in dollars
        cursor.execute("SELECT price FROM betsdb WHERE id=%s", (IDS,))
        pricez = "%s" % cursor.fetchone()
        if code_active == '1':
            price = round(int(pricez) / 100 * 80)
        else:
            price = int(pricez)
        # price * 100 so as to include 2 d.p.
        prices = [LabeledPrice(tariff, price * 100)]

        # optionally pass need_name=True, need_phone_number=True,
        # need_email=True, need_shipping_address=True, is_flexible=True
        bot.sendInvoice(chat_id, title, description, payload,
                        provider_token, start_parameter, currency, prices)

    except:
        bot.send_message(text='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.',
                         chat_id=update.effective_message.chat_id,
                         message_id=update.effective_message.message_id,
                         reply_markup=markup)
        cursor.execute("UPDATE betsdb SET patrons = patrons+1 WHERE id=%s", (IDS,))
        conn.commit()

    return CHOOSING


def precheckout_callback(bot, update):
    query = update.pre_checkout_query
    # check the payload, is this from your bot?
    if query.invoice_payload != 'Custom-Payload':
        # answer False pre_checkout_query
        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=False,
                                      error_message="–û—à–∏–±–∫–∞. –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞.")
    else:
        bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)


# finally, after contacting to the payment provider...
def successful_payment_callback(bot, update, user_data):
    IDS = user_data['choice']
    usrid = user_data['usrid']
    nick = user_data['username']
    cursor.execute("SELECT code_active FROM users WHERE id = %s", (usrid,))
    code_active = "%s" % cursor.fetchone()
    if code_active == '1':
        cursor.execute("UPDATE users SET code_active = 0 WHERE id=%s", (usrid,))
        conn.commit()
    else:
        pass
    cursor.execute("SELECT tariff FROM betsdb WHERE id=%s", (IDS,))
    tariff = "%s" % cursor.fetchone()
    # do something after successful receive of payment?
    update.effective_message.reply_text('''–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–ø–ª–∞—Ç—É!
–û–∂–∏–¥–∞–π, –º—ã —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ç–µ–±—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.''', reply_markup=markup)
    cursor.execute("UPDATE betsdb SET patrons = patrons+1 WHERE id=?", (IDS,))
    cursor.execute("SELECT price FROM betsdb WHERE id=%s", (IDS,))
    product_price = "%d" % cursor.fetchone()
    if code_active == '1':
        tsprice = round(int(product_price) * 0.8)
    else:
        tsprice = int(product_price)
    cursor.execute("SELECT totalspent FROM users WHERE id=%s", (usrid,))
    ts = "%d" % cursor.fetchone()
    ts = int(ts) + int(tsprice)
    cursor.execute("UPDATE users SET totalspent = %s WHERE id=%s", (str(ts), usrid))
    try:
        cursor.execute("SELECT promo FROM users WHERE id=%s", (usrid,))
        promoz = "%s" % cursor.fetchone()
        cursor.execute("SELECT earnings FROM users WHERE mypromo=%s", (promoz,))
        earngs = "%d" % cursor.fetchone()
        earngs = round(int(earngs) + (int(tsprice) / 10))
        cursor.execute("UPDATE users SET earnings = %s WHERE mypromo=%s", (str(earngs), promoz))
    except:
        pass
    conn.commit()
    bot.send_message(
        text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {usrid} (@{nick}) –æ–ø–ª–∞—Ç–∏–ª {tsprice} —Ä—É–±–ª–µ–π.
–¢–∞—Ä–∏—Ñ: {tariff}.
–î–∞—Ç–∞: {now.day}.{now.month}.{now.year}''', chat_id='@bigbetz_orders')


def get_back(bot, update):
    update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëæ", reply_markup=markup)

    return CHOOSING


def paid_sub(bot, update):
    update.message.reply_text('''–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞-—á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
–û–¥–Ω–∞–∫–æ, —É —Ç–µ–±—è –µ—Å—Ç—å *–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å* –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç—å *—Å–∫–∏–¥–∫—É 50%*.
–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ _(–±–µ–∑ —Å–∫–∏–¥–∫–∏)_:
*–ù–µ–¥–µ–ª—è* - 1500—Ä.
*2 –Ω–µ–¥–µ–ª–∏* - 2500—Ä.
*–ú–µ—Å—è—Ü* - 4000—Ä.
–ü–∏—Å–∞—Ç—å: @daaetoya''', parse_mode='MARKDOWN')

    return CHOOSING


def stats(bot, update, user_data):
    userid = user_data['usrid']
    cursor.execute("SELECT COUNT(*) FROM users")
    max_users = "%s" % cursor.fetchone()
    cursor.execute("SELECT COUNT(*) FROM users WHERE mypromo IS NOT NULL")
    max_partners = "%s" % cursor.fetchone()
    cursor.execute("SELECT COUNT(*) FROM users WHERE promo IS NOT NULL")
    max_referrals = "%s" % cursor.fetchone()
    cursor.execute("SELECT SUM(earnings) FROM users WHERE mypromo IS NOT NULL")
    max_earnings = "%s" % cursor.fetchone()
    bot.send_message(text=f"""–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {max_users}
–ö–æ–ª-–≤–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {max_partners}
–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {max_referrals}
–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {max_earnings} —Ä—É–±–ª–µ–π""", chat_id=userid)

    return CHOOSING


def error(bot, update, error):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, error)


def partner_beta(bot, update):
    update.message.reply_text('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞-—á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: @BIGBetz')

    return CHOOSING


def restore(bot, update):
    update.message.reply_text('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)

    return CHOOSING


def rules(bot, update):
    update.message.reply_text('''*–ü—Ä–∞–≤–∏–ª–∞ BIG Betz*
    
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥—à–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (18+).
2. –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π —É–±–µ–¥–∏—Å—å —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª–µ @username –Ω–µ –ø—É—Å—Ç–æ–µ.
3. –ó–∞–Ω–æ–≤–æ –ø—Ä–æ–≤–µ—Ä—å –ø—É–Ω–∫—Ç 2.

_* - –µ—Å–ª–∏ –ø—É–Ω–∫—Ç 2 –Ω–∞—Ä—É—à–µ–Ω, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
–¢–∞–∫–∞—è –æ–ø–ª–∞—Ç–∞ —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç._
''', parse_mode='MARKDOWN')

    return CHOOSING


def main():
    # Create the Updater and pass it your bot's token.
    updater = Updater(os.environ['token'])

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start, pass_user_data=True)],

        states={
            CHOOSING:
                [
                 RegexHandler('^–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥$', custom_promo, pass_user_data=True),
                 RegexHandler('^–°–≤—è–∑—å —Å –Ω–∞–º–∏$', contact_us),
                 RegexHandler('^–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º$', partnership, pass_user_data=True),
                 RegexHandler('^–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞$', paid_sub),
                 # RegexHandler('^–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞$', custom_choice, pass_user_data=True),
                 RegexHandler('^–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞$', free_subscription, pass_user_data=True),
                 RegexHandler('^–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç$', profile),
                 RegexHandler('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$', first_time),
                 CommandHandler('add', add_partner, pass_user_data=True),
                 CommandHandler('stats', stats, pass_user_data=True),
                 CommandHandler('delete', delete_promos),
                 CommandHandler('send', message, pass_user_data=True)],

            FRST:
                [MessageHandler(Filters.text, first_time, pass_user_data=True)],

            PRFL:
                [CallbackQueryHandler(profile_action, pass_user_data=True)],

            OK:
                [MessageHandler(Filters.text, confirmation, pass_user_data=True)],

            UN:
                [MessageHandler(Filters.text, partner_un, pass_user_data=True)],

            UP:
                [MessageHandler(Filters.text, partner_promo, pass_user_data=True)],

            PR:
                [MessageHandler(Filters.text, message_pr)],

            PROMOCODE:
                [MessageHandler(Filters.text, promo, pass_user_data=True)],

            PAYMENT:
                [CallbackQueryHandler(button, pass_user_data=True)],

            TYPING_REPLY: [CallbackQueryHandler(received_information, pass_user_data=True)],
                },

        fallbacks=[RegexHandler('^–ù–∞–∑–∞–¥$', get_back),
                   CommandHandler('help', restore),
                   CommandHandler('rules', rules)]
    )
    dp.add_handler(PreCheckoutQueryHandler(precheckout_callback))

    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment_callback, pass_user_data=True))

    dp.add_handler(conv_handler)

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
