# !/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler, CallbackQueryHandler, PreCheckoutQueryHandler)#, PicklePersistence)
import logging
import psycopg2
import config
import os
from importlib import reload

conn = psycopg2.connect(dbname=os.environ['dbname'], user=os.environ['user'], password=os.environ['password'], host=os.environ['host'])

cursor = conn.cursor()

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

CHOOSING, SEND, FRST, JOIN, TGS, PST, PRFL, TOP = range(8)

reply_keyboard = [['–ö–∞–∫ —Å—Ç–∞—Ç—å —Ç–æ–ø–æ–º üöÄ'],
                  ['FAQ', '–°–ª—É—á–∞–π–Ω—ã–π –∞–≤—Ç–æ—Ä'],
                  ['–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏'],
                  ['–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

first_keyboard = [['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']]
first = ReplyKeyboardMarkup(first_keyboard, one_time_keyboard=True, resize_keyboard=True)

members = 'creator, administrator, member'
memberslist = members.split(', ')


def start(bot, update, user_data):
    """Send a message when the command /start is issued."""
    name = update.message.from_user.full_name
    update.message.reply_text(f'''–ó–¥–∞—Ä–æ–≤–∞, {name}.
–¢–æ–ª—å–∫–æ —Ç–µ–±—è –∏ –∂–¥–∞–ª–∏!''')
    nick = update.message.from_user.username
    userid = update.message.from_user.id
    user_data['name'] = name
    user_data['nick'] = nick
    user_data['userid'] = userid
    member = bot.get_chat_member('@whoismdk', userid)
    if member.status in memberslist:
        update.message.reply_text('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º :)', reply_markup=markup)
        cursor.execute("SELECT id FROM users WHERE id=%s", (userid,))
        result = "%s" % cursor.fetchone()
        if result == "None":
            cursor.execute("INSERT INTO users (nickname, namesurname, id) VALUES (%s, %s, %s)", (nick, name, userid))
            conn.commit()
        else:
            pass

        return CHOOSING
    else:
        update.message.reply_text('–î–ª—è –Ω–∞—á–∞–ª–∞, –±—É–¥—å –¥–æ–±—Ä(-–∞), –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @whoismdk'
                                  , reply_markup=first)

        return FRST


def first_time(bot, update, user_data):
    userid = user_data['userid']
    nick = user_data['nick']
    name = user_data['name']
    member = bot.get_chat_member('@whoismdk', userid)
    if member.status in memberslist:
        update.message.reply_text('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! :)')
        update.message.reply_text('''–Ø –ø–æ–º–æ–≥—É –æ—Å–≤–æ–∏—Ç—å—Å—è —Ç–µ–±–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ MDK!
        
–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ —á—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º ;)''', reply_markup=markup)
        cursor.execute("SELECT id FROM users WHERE id=%s", (userid,))
        result = "%s" % cursor.fetchone()
        if result == "None":
            cursor.execute("INSERT INTO users (nickname, namesurname, id) VALUES (%s, %s, %s)", (nick, name, userid))
            conn.commit()
        else:
            pass

        return CHOOSING
    else:
        update.message.reply_text('–î–ª—è –Ω–∞—á–∞–ª–∞, –±—É–¥—å –¥–æ–±—Ä(-–∞), –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª: @whoismdk'
                                  , reply_markup=first)

        return FRST


def bot_faq(bot, update):
    update.message.reply_text('FAQ')

    return CHOOSING


def top_users(bot, update):
    reply_keyboardz = [['–ù–∞–∑–∞–¥']]
    state = ReplyKeyboardMarkup(reply_keyboardz, one_time_keyboard=True, resize_keyboard=True)
    keyboard = [[InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —à—Ä–∏—Ñ—Ç–∞–º", callback_data="fonts_guide")],
                [InlineKeyboardButton("–®–∞–±–ª–æ–Ω—ã –¥–ª—è –º–µ–º–æ–≤", callback_data="mem_pics")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–¢–∞–∫—Å, –≤–æ—Ç —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å.", reply_markup=state)
    update.message.reply_text('–í—ã–±–∏—Ä–∞–π üëá', reply_markup=reply_markup)

    return TOP
  
  
def top_users_action(bot, update, user_data):
    IDS = user_data['userid']
    query = update.callback_query

    if query.data == "fonts_guide":
        bot.send_message(text="–û—Ç–ª–∏—á–Ω—ã–π –≥–∞–π–¥ –ø–æ —à—Ä–∏—Ñ—Ç–∞–º: mdk.is/m/AgR1MP", chat_id=IDS)
        query.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ Eugene_hs üòé")

        return TOP
    elif query.data == "mem_pics":
        bot.send_message(text="""–ü–æ–¥–±–æ—Ä–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏, –∑–∞–±–∏—Ä–∞–π:
1. mdk.is/m/Ag7NjA
2. mdk.is/m/Aq1YkA
3. mdk.is/m/AKkNlA
4. mdk.is/m/vnVmgv
5. mdk.is/m/v4NLYA
6. mdk.is/m/P1ZaBA
7. mdk.is/m/P6jREP
8. mdk.is/m/voOJov
9. mdk.is/m/D7JBrA
10. mdk.is/m/AE36Rv
11. mdk.is/m/AE07MP
12. mdk.is/m/AWaqbv
13. mdk.is/m/DLMnJv""", chat_id=IDS, disable_web_page_preview=True)
        query.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞ Eugene_hs –∏ leriben üòé")
        
        return TOP
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞!")

        return TOP


def contact_us(bot, update):
    update.message.reply_text('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –Ω–∞–º: @wimhelpBot')

    return CHOOSING


def join_us(bot, update, user_data):
    user = user_data['userid']
    cursor.execute("SELECT cheated FROM users WHERE id=%s", (user,))
    cheated = "%s" % cursor.fetchone()
    cursor.execute("SELECT joined FROM users WHERE id=%s", (user,))
    joined = "%s" % cursor.fetchone()
    if '1' in cheated:
        update.message.reply_text('''–ú—ã —É–∂–µ –ø–æ–π–º–∞–ª–∏ —Ç–µ–±—è –Ω–∞ –æ–±–º–∞–Ω–µ, —Ç–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.

–ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–∏—à–∏: @wimhelpBot''', reply_markup=markup)
        
        return CHOOSING
    elif '1' in joined:
        update.message.reply_text('''–¢—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É. –ï—Å–ª–∏ –æ–Ω–∞ –≤—Å—ë-–µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è :)

–ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è –¥–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤, –ø–∏—à–∏: @wimhelpBot''', reply_markup=markup)
        
        return CHOOSING
    else:
        update.message.reply_text('–¢–∞–∫—Å, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. (–ü—Ä–∏–º–µ—Ä: admin)')

        return JOIN


def user_join(bot, update, user_data):
    user = user_data['userid']
    name = user_data['name']
    nick = user_data['nick']
    cursor.execute("SELECT mdkname FROM users WHERE mdkname IS NOT NULL")
    users = "%s" % cursor.fetchall()
    mdkname = update.message.text
    if mdkname in users:
        update.message.reply_text('–ó–∞—Å—Ä–∞–Ω–µ—Ü, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ó–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±–º–∞–Ω–∞ –º—ã –æ—Ç–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.', reply_markup=markup)
        bot.send_message(text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (@{nick}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–µ–±–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫ {mdkname}
ID: {user}''', chat_id='@whoismdkadmins')
        cursor.execute("UPDATE users SET cheated = 1 WHERE id=%s", (user,))
        conn.commit()
        
        return CHOOSING
    else:
        bot.send_message(text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (@{nick}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–∏–∫: {mdkname}
ID: {user}''', chat_id='@whoismdkadmins')
        update.message.reply_text(f'''–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.
–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {user}''', reply_markup=markup)
        update.message.reply_text('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: example.com')
        cursor.execute("UPDATE users SET joined = 1 WHERE id=%s", (user,))
        conn.commit()

        return CHOOSING


def get_id(bot, update):
    update.message.reply_text(update.message.from_user.id)

    return CHOOSING


def media_links(bot,update):
    update.message.reply_text('LINKS')

    return CHOOSING


def profile(bot,update, user_data):
    IDS = user_data['userid']
    cursor.execute("SELECT mdkname FROM users WHERE id=%s", (IDS,))
    mdkname = "%s" % cursor.fetchone()
    cursor.execute("SELECT toppost FROM users WHERE id=%s", (IDS,))
    toppost = "%s" % cursor.fetchone()
    cursor.execute("SELECT tags FROM users WHERE id=%s", (IDS,))
    tags = "%s" % cursor.fetchone()
    reply_keyboardz = [['–ù–∞–∑–∞–¥']]
    state = ReplyKeyboardMarkup(reply_keyboardz, one_time_keyboard=True, resize_keyboard=True)
    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª—É—á—à–∏–π –ø–æ—Å—Ç", callback_data="change_toppost")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="change_tags")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f'''–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MDK: {mdkname}
–õ—É—á—à–∏–π –ø–æ—Å—Ç: {toppost}
–¢–µ–≥–∏: {tags}''', reply_markup=state)
    update.message.reply_text('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=reply_markup)

    return PRFL
  
  
def profile_action(bot, update, user_data):
    IDS = user_data['userid']
    query = update.callback_query

    if query.data == "change_tags":
        bot.send_message(text="–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", chat_id=IDS)

        return TGS
    elif query.data == "change_toppost":
        bot.send_message(text="–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ª—É—á—à–∏–π –ø–æ—Å—Ç.", chat_id=IDS)
        query.answer("–¢–æ–ª—å–∫–æ –±–µ–∑ 'http://', —Ç–∞–∫ –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–µ–µ üòé")
        
        return PST
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞!")

        return PRFL
      
      
def custom_tags(bot, update, user_data):
    IDS = user_data['userid']
    new_tags = update.message.text
    cursor.execute("UPDATE users SET tags = %s WHERE id=%s", (new_tags, IDS))
    conn.commit()
    update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤—ã–µ —Ç–µ–≥–∏: {new_tags}", reply_markup=markup)
    
    return CHOOSING
  
  
def custom_toppost(bot, update, user_data):
    IDS = user_data['userid']
    new_toppost = update.message.text
    cursor.execute("UPDATE users SET toppost = %s WHERE id=%s", (new_toppost, IDS))
    conn.commit()
    update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_toppost}", reply_markup=markup)
    
    return CHOOSING


def add_user(bot, update):
    update.message.reply_text('ADD')

    return CHOOSING


def message(bot, update, user_data):
    reload(config)
    user = str(user_data['userid'])
    if user in config.admin:
        update.message.reply_text('–ß–µ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å?')

        return SEND
    else:
        update.message.reply_text('–¢—ã –Ω–µ –∞–¥–º–∏–Ω.')

        return CHOOSING


def message_send(bot, update):
    sends = 0
    blocks = 0
    notification = update.message.text
    cursor.execute("SELECT id FROM users")
    while True:
        try:
            chat_id = '%s' % cursor.fetchone()
            sends += 1
            if chat_id == 'None':
                break
            bot.send_message(text=notification, chat_id=chat_id)
        except:
            blocks += 1
            pass
    update.message.reply_text(f'''–ö–æ–ª-–≤–æ –æ—Ç–æ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sends}
–ù–µ –¥–æ—à–ª–æ: {blocks}''')

    return CHOOSING


def stats(bot, update):
    update.message.reply_text('STATS')

    return CHOOSING


def get_back(bot, update):
    update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëæ", reply_markup=markup)

    return CHOOSING


def restore(bot, update):
    update.message.reply_text('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)

    return CHOOSING


def random_user(bot, update):
    cursor.execute(
        "SELECT mdkname, toppost, tags FROM users WHERE mdkname IS NOT NULL AND tags IS NOT NULL AND toppost IS NOT NULL ORDER BY RANDOM() LIMIT 1")
    update.message.reply_text('''*–ê–≤—Ç–æ—Ä:* %s
*–õ—É—á—à–∏–π –ø–æ—Å—Ç:* %s
*–¢–µ–≥–∏:* %s''' % cursor.fetchone(), parse_mode='MARKDOWN')

    return CHOOSING


def error(bot, update, error):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, error)


def main():
    #pp = PicklePersistence(filename='conversationbot')
    updater = Updater(os.environ['token'])#, persistence=pp)

    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start, pass_user_data=True)],

        states=
        {
            CHOOSING:
                [
                    RegexHandler('^FAQ$', bot_faq),
                    RegexHandler('^–ö–∞–∫ —Å—Ç–∞—Ç—å —Ç–æ–ø–æ–º üöÄ$', top_users),
                    RegexHandler('^–°–ª—É—á–∞–π–Ω—ã–π –∞–≤—Ç–æ—Ä$', random_user),
                    RegexHandler('^–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$', join_us, pass_user_data=True),
                    RegexHandler('^–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏$', media_links),
                    RegexHandler('^–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å$', contact_us),
                    RegexHandler('^–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç$', profile, pass_user_data=True),
                    # RegexHandler('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$', first_time),
                    CommandHandler('add', add_user),
                    CommandHandler('stats', stats),
                    CommandHandler('id', get_id),
                    CommandHandler('send', message, pass_user_data=True)],

            FRST:
                [MessageHandler(Filters.text, first_time, pass_user_data=True)],

            SEND:
                [MessageHandler(Filters.text, message_send)],
          
            JOIN:
                [MessageHandler(Filters.text, user_join, pass_user_data=True)],
            TGS:
                [MessageHandler(Filters.text, custom_tags, pass_user_data=True)],
            PST:
                [MessageHandler(Filters.text, custom_toppost, pass_user_data=True)],
            PRFL:
                [CallbackQueryHandler(profile_action, pass_user_data=True),
            TOP:
                [CallbackQueryHandler(top_users_action, pass_user_data=True)],
        },

        fallbacks=[RegexHandler('^–ù–∞–∑–∞–¥$', get_back),
                   CommandHandler('help', restore)],
        allow_reentry=True
        #name="my_conversation",
        #persistent=True
    )

    dp.add_handler(conv_handler)

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
