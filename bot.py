#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.
#
# THIS EXAMPLE HAS BEEN UPDATED TO WORK WITH THE BETA VERSION 12 OF PYTHON-TELEGRAM-BOT.
# If you're still using version 11.1.0, please see the examples at
# https://github.com/python-telegram-bot/python-telegram-bot/tree/v11.1.0/examples


"""
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic inline bot example. Applies different text transformations.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""
import logging
import random
import os
from telegram.ext.dispatcher import run_async
import psycopg2


from telegram import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, ConversationHandler


# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

MESSAGE, TOTAL, DICE = range(3)


members = 'creator, administrator, member'
memberslist = members.split(', ')


conn = psycopg2.connect(dbname = 'd19olitilh6q1s', user = 'oukggnzlpirgzh', password = 'a4e84b7de4257e36cecc14b60bb0ff570f7ce52d5d24b1c7eb275c96f403af36', host = 'ec2-79-125-23-20.eu-west-1.compute.amazonaws.com')
cursor = conn.cursor()

bot_link = 'telegram.me/royalcasinobot'
bot_username = '@royalcasinobot'
channel_username = '@rylcasino'


# Define a few command handlers. These usually take the two arguments bot and
# update. Error handlers also receive the raised TelegramError object in error.
@run_async
def start(update, context):
	"""Send a message when the command /start is issued."""
	ids = update.message.from_user.id
	fullname = update.message.from_user.full_name
	usern = update.message.from_user.username
	username = usern.lower()
	cursor.execute('select balance from userz where id = %s', (ids,))
	balance = cursor.fetchone()
	error = "None"	
	if error not in str(balance):
		pass
	elif (error in str(fullname) or error in str(username)):
		update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!

–ó–∞–ø–æ–º–Ω–∏, –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–ª—É–±–∞ - –≤–µ—Å–µ–ª–∏—Å—å. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª ;)''')
		update.message.reply_text('''<b>–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ?</b>
–ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å —É –Ω–∞—Å, –ø–æ–ª—è _Name_ –∏ _Username_ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.
–ò—Å–ø—Ä–∞–≤—å —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ /reg :)

–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <a href="https://telegra.ph/Polzovatelskoe-soglashenie-10-22-2">—Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è</a> —Å –Ω–∞—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç.''', parse_mode='HTML')
	else:
		update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ!

–ó–∞–ø–æ–º–Ω–∏, –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∫–ª—É–±–∞ - –≤–µ—Å–µ–ª–∏—Å—å. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª ;)''')
		registration_Query = "INSERT INTO userz (id, fullname, username, balance) VALUES (%s, %s, %s, 0)"
		cursor.execute(registration_Query, (ids, fullname, username,))
		conn.commit()
		update.message.reply_text('<b>–¢—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ?</b>\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏ /info ;)\n\n–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ <a href="https://telegra.ph/Polzovatelskoe-soglashenie-10-22-2">—Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è</a> —Å –Ω–∞—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —á—Ç–æ —Ç–µ–±–µ –µ—Å—Ç—å 18 –ª–µ—Ç.', parse_mode='HTML')
	try:
		user_says = context.args[0]
		invoker = update.message.from_user.id
		error = 'None'
		cursor.execute('SELECT refferrer FROM userz WHERE id = %s', (invoker,))
		promo_used = cursor.fetchone()
		cursor.execute('SELECT id FROM userz')
		totalb = cursor.fetchall()
		if user_says not in str(totalb):
			update.message.reply_text('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
		elif user_says in str(invoker):
			update.message.reply_text('–°–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!')
		elif error not in str(promo_used):
			update.message.reply_text('–£–ø—Å–∏, –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑.')
		else:
			cursor.execute('UPDATE userz SET reffs = reffs + 1, balance = balance + 20 WHERE id = %s', (user_says,))
			cursor.execute('UPDATE userz SET balance = balance + 100, refferrer = %s WHERE id = %s', (user_says, invoker,))
			update.message.reply_text('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç. (+100 –º–æ–Ω–µ—Ç —Ç–µ–±–µ –∏ +20 –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–∞)')
			conn.commit()
	except:
		pass


@run_async
def deposit(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')
	else:
		update.message.reply_text('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>Nevermore</code> —á–µ—Ä–µ–∑ —Å–∞–π—Ç mdk.is.\n<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> –ø—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ–π <code>ID</code> (—á–∏—Å–ª–æ –Ω–∏–∂–µ) –∫ –¥–æ–Ω–∞—Ç—É, –∏–Ω–∞—á–µ —Å—É–º–º–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º.', disable_web_page_preview=True, parse_mode='HTML')
		update.message.reply_text(f'<code>{update.message.from_user.id}</code>', parse_mode='HTML')


@run_async
def withdraw(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')
	else:
		update.message.reply_text('–í—ã–≤–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á—É—Ç—å –ø–æ–∑–∂–µ.')


@run_async
def registration(update, context):
	ids = update.message.from_user.id
	fullname = update.message.from_user.full_name
	usern = update.message.from_user.username
	username = usern.lower()
	# balance_Query = 
	id_Query = 'select balance from userz where id = %s'
	cursor.execute(id_Query, (ids,))
	balance = cursor.fetchone()
	error = "None"	
	if error not in str(balance):
		update.message.reply_text('<b>–û—à–∏–±–∫–∞!</b> –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!', parse_mode='HTML')
	elif (error in str(fullname) or error in str(username)):
		update.message.reply_text('<b>–û—à–∏–±–∫–∞!</b> <code>Name</code> –∏–ª–∏ <code>Username</code> –∏–º–µ—é—Ç –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.', parse_mode='HTML')
	else:
		registration_Query = "INSERT INTO userz (id, fullname, username, balance) VALUES (%s, %s, %s, 0)"
		cursor.execute(registration_Query, (ids, fullname, username,))
		conn.commit()
		update.message.reply_text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')


@run_async
def getInfo(update, context):
	try:
		usrid = update.message.from_user.id
		cursor.execute('SELECT id FROM userz')
		all_users = cursor.fetchall()
		try:
			target = update.message.reply_to_message.from_user.id
			if '/info' in update.message.reply_to_message.text:
				pass
			elif str(target) in str(all_users):
				target_info_Query = "select username, balance from userz where id = %s"
				cursor.execute(target_info_Query, (target,))
				target_info = cursor.fetchall()
				for row in target_info:
					update.message.reply_text(f'@{row[0]}, üí∞: <code>{row[1]}</code>', parse_mode="HTML")

					return

			else:
				update.message.reply_text('–û—à–∏–±–∫–∞! –≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

				return

		except:
			pass

		user_info_Query = "select username, balance from userz where id = %s"

		cursor.execute(user_info_Query, (usrid,))
		info = cursor.fetchall()
		for row in info:
			update.message.reply_text(f'@{row[0]}, üí∞: <code>{row[1]}</code>', parse_mode="HTML")
	except:
		update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.')


@run_async
def tos(update, context):
    """Send a message when the command /help is issued."""
    update.message.reply_text('<a href="https://telegra.ph/Polzovatelskoe-soglashenie-10-22-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a> <b>Royal Casino</b>', parse_mode='HTML')


@run_async
def getPromo(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')
	else:
		ids = update.message.from_user.id
		cursor.execute('SELECT reffs FROM userz where id = %s', (ids,))
		reffs = cursor.fetchone()
		cursor.execute('SELECT refferrer FROM userz where id = %s', (ids,))
		ref = cursor.fetchone()
		update.message.reply_text(f'–ò—Å–ø. –ø—Ä–æ–º–æ–∫–æ–¥: {ref[0]}\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª–æ–≤: {reffs[0]}\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\nhttps://t.me/RoyalCasinoBot?start={ids}')


@run_async
def coinflip(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')

		return ConversationHandler.END
	else:
		context.user_data['game'] = 'coinflip'
		inv_user_id = update.message.from_user.id
		user_balance = "select balance from userz where id = %s"
		cursor.execute(user_balance, (inv_user_id,))
		balance = cursor.fetchone()
		context.user_data['message'] = update.message.reply_text(f'<code>Coinflip</code> üåï\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance[0]}</b> –º–æ–Ω–µ—Ç\n\n(<b>min</b>: <code>100</code>, <b>max</b>: <code>100000</code>)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='HTML')
		context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

		return TOTAL


# @run_async
# def roulette(update, context):
# 	context.user_data['game'] = 'roulette'
# 	inv_user_id = update.message.from_user.id
# 	user_balance = "select balance from userz where id = %s"
# 	cursor.execute(user_balance, (inv_user_id,))
# 	balance = cursor.fetchone()
# 	context.user_data['message'] = update.message.reply_text(f'Roulette üé∞\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{balance[0]}* –º–æ–Ω–µ—Ç\n\n(*min*: 100, *max*: 100000)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='MARKDOWN')
# 	context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

# 	return TOTAL
@run_async
def roulette(update, context):
	update.message.reply_text('–†—É–ª–µ—Ç–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ Dice üé≤ (/dice) –∏–ª–∏ Coinflip üåï (/coinflip).')

	return ConversationHandler.END


@run_async
def dice(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')

		return ConversationHandler.END
	else:
		try:
			context.user_data['game'] = 'dice'
			inv_user_id = update.message.from_user.id
			user_balance = "select balance from userz where id = %s"
			cursor.execute(user_balance, (inv_user_id,))
			balance = cursor.fetchone()
			# update.message.reply_text(f'Dice üé≤\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: *{balance[0]}* –º–æ–Ω–µ—Ç\n\n(*min*: 100, *max*: 100000)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='MARKDOWN')
			context.user_data['message'] = update.message.reply_text(f'<code>Dice</code> üé≤\n\n–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance[0]}</b> –º–æ–Ω–µ—Ç\n\n(<b>min</b>: <code>100</code>, <b>max</b>: <code>100000</code>)\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='HTML')
			context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

			return DICE
		except:
			update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')

			return ConversationHandler.END


@run_async
def dice_start(update, context):
	context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
	game = context.user_data['game']
	message = context.user_data['message']
	total = update.message.text
	inv_user_id = update.message.from_user.id
	user_balance = "select balance from userz where id = %s"
	cursor.execute(user_balance, (inv_user_id,))
	balance = cursor.fetchone()
	try:
		summ = int(total)
	except:
		try:
			context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ñ–∞–ª—å, –Ω–æ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –º–æ–Ω–µ—Ç.\n–î–∞, –Ω–∞—Ç—É—Ä–æ–π —Ç–æ–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º :(\n\n–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ - /dice')

			return ConversationHandler.END
		except:

			return

	if summ < 100:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')

		return ConversationHandler.END
	elif summ > 100000:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –º–æ–∂–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ ;)')

		return ConversationHandler.END
	elif summ > int(balance[0]):
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.')

		return ConversationHandler.END
	elif (summ >= 100) and (summ <= 100000) and game == 'dice':
		keyboard = [[InlineKeyboardButton('2x', callback_data=f'2x {inv_user_id} {summ} dice'),
					 InlineKeyboardButton('3x', callback_data=f'3x {inv_user_id} {summ} dice'),
					 InlineKeyboardButton('5x', callback_data=f'5x {inv_user_id} {summ} dice'),
					 InlineKeyboardButton('10x', callback_data=f'10x {inv_user_id} {summ} dice'),
					 InlineKeyboardButton('50x', callback_data=f'50x {inv_user_id} {summ} dice')],
					[InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã üé≤', callback_data=f'rules_dice {inv_user_id} {summ}'),
					 InlineKeyboardButton('–î–∏–∞–ø–∞–∑–æ–Ω—ã üé≤', callback_data=f'int_dice {inv_user_id} {summ}')]]
		koefs = InlineKeyboardMarkup(keyboard)
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è üëá', reply_markup=koefs)
		cursor.execute('UPDATE userz SET balance = balance - %s WHERE id = %s', (summ, inv_user_id,))
		conn.commit()

		return ConversationHandler.END
	else:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='<code>Error 404</code>. –ö–∞–∫ —Ç—ã –≤–æ–æ–±—â–µ —ç—Ç–æ —Å–¥–µ–ª—è–ª—ä? :/\n–°–∫–∏–Ω—å —Å–∫—Ä–∏–Ω —Å—é–¥–∞: @daaetoya –∏ –ø–æ–ª—É—á–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ <b>1000</b> –º–æ–Ω–µ—Ç.', parse_mode='HTML')

		return ConversationHandler.END
	


@run_async
def Total(update, context):
	game = context.user_data['game']
	message = context.user_data['message']
	context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
	invoker = update.message.from_user.full_name
	inv_user = update.message.from_user.username
	inv_user_id = update.message.from_user.id
	user_balance = "select balance from userz where id = %s"
	cursor.execute(user_balance, (inv_user_id,))
	balance = cursor.fetchone()
	total = update.message.text
	try:
		summ = int(total)
	except:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ñ–∞–ª—å, –Ω–æ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –º–æ–Ω–µ—Ç.\n–î–∞, –Ω–∞—Ç—É—Ä–æ–π —Ç–æ–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º :(\n\n–í–≤–µ–¥–∏ <b>—Ü–µ–ª–æ–µ</b> —á–∏—Å–ª–æ.\n–û—Ç–º–µ–Ω–∞ - /cancel', parse_mode='HTML')

		return TOTAL

	if summ < 100:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–¢–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')

		return ConversationHandler.END
	elif summ > 100000:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –º–æ–∂–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ ;)')

		return ConversationHandler.END
	elif summ > int(balance[0]):
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.')

		return ConversationHandler.END
	elif (summ >= 100) and (summ <= 100000) and game == 'coinflip':
		try:
			keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ü§†', callback_data=f'coinflip {inv_user_id} {summ}')],
						[InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üëæ', url=bot_link)]]
			reply_markup = InlineKeyboardMarkup(keyboard)
			context.bot.send_message(chat_id=channel_username, text=f'<code>Coinflip</code> üåï\n\n<b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>: {invoker} (@{inv_user})\n<b>–°—Ç–∞–≤–∫–∞</b>: {summ} –º–æ–Ω–µ—Ç', parse_mode='HTML', reply_markup=reply_markup)
			context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text=f'–î—É—ç–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n–ù–µ –∑–∞–±—É–¥—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –≥–¥–µ –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –∏–≥—Ä—ã: {channel_username}')
			cursor.execute('UPDATE userz SET balance = balance - %s WHERE id = %s', (summ, inv_user_id,))
			conn.commit()
			context.user_data['participants'] = 0
			
			return ConversationHandler.END
		except:
			context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–û—à–∏–±–∫–∞ :/')

			return ConversationHandler.END
	elif (summ >= 100) and (summ <= 100000) and game == 'roulette':
		keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ü§†', callback_data=f'roulette {inv_user_id} {summ}')],
					[InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üëæ', url=bot_link)]]
		reply_markup = InlineKeyboardMarkup(keyboard)
		context.bot.send_message(chat_id=channel_username, text=f'<code>Roulette</code> üé∞\n\n<b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b>: {invoker} (@{inv_user})\n<b>–°—Ç–∞–≤–∫–∞</b>: {summ} –º–æ–Ω–µ—Ç', parse_mode='HTML', reply_markup=reply_markup)
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.')
		context.user_data['participants'] = 1
		cursor.execute('UPDATE userz SET balance = balance - %s WHERE id = %s', (summ, inv_user_id,))
		conn.commit()
		
		return ConversationHandler.END
	else:
		context.user_data['message'] = context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='<code>Error 404</code>. –ö–∞–∫ —Ç—ã –≤–æ–æ–±—â–µ —ç—Ç–æ —Å–¥–µ–ª—è–ª—ä? :/\n–°–∫–∏–Ω—å —Å–∫—Ä–∏–Ω —Å—é–¥–∞: @daaetoya –∏ –ø–æ–ª—É—á–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ <b>1000</b> –º–æ–Ω–µ—Ç.', parse_mode='HTML')

		return ConversationHandler.END


@run_async
def button(update, context):
	try:
		cursor.execute('SELECT id FROM userz')
		all_users = cursor.fetchall()
	except:
		query.answer('–û—à–∏–±–∫–∞! –ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', show_alert=True)

		return
	keyboard = [[InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', url=bot_link)]]
	reply_markup = InlineKeyboardMarkup(keyboard)
	query = update.callback_query
	betinfo = query.data.split()
	cursor.execute('SELECT username FROM userz WHERE id = %s', (betinfo[1],))
	participant1 = cursor.fetchone()
	cursor.execute('SELECT username, balance FROM userz WHERE id = %s', (query.from_user.id,))
	participant2 = cursor.fetchone()
	betsumm = betinfo[2]
	betssumm = int(betsumm)
	total = int(betsumm)*1.9
	number = random.randint(0, 1000)

	if str(query.from_user.id) not in str(all_users):
		query.answer(f'–û—à–∏–±–∫–∞!\n\n–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏: /reg', show_alert=True)
	elif ('coinflip' in query.data) and (betinfo[1] in str(query.from_user.id)):
		query.answer('–ù–µ–ª—å–∑—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–≤–æ–µ–π –∂–µ –∏–≥—Ä–µ.', show_alert=True)
	elif ('coinflip' in query.data) and (int(participant2[1]) < int(betsumm)):
		query.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É /deposit', show_alert=True)
	elif 'coinflip' in query.data:
		cursor.execute('UPDATE userz SET balance = balance - %s WHERE id = %s', (betsumm, query.from_user.id,))
		cf_participants = [participant1[0], participant2[0]]
		winner = random.choice(cf_participants)
		if int(total) >= 9500:
			try:
				context.bot.send_message(chat_id=-1001441511504, text=f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</b> @{winner}, –æ–Ω(-–∞) —Å—Ä—ã–≤–∞–µ—Ç <b>–ö—É—à</b> –≤ <code>Coinflip</code>! üë∏\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{int(total)}</code>', parse_mode='HTML')
			except:
				pass
		elif (int(total) >= 5700) and (int(total) < 9500):
			try:
				context.bot.send_message(chat_id=-1001441511504, text=f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º</b> @{winner}, –æ–Ω(-–∞) –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç <b>–î–∂–µ–∫–ø–æ—Ç</b> –≤ <code>Coinflip</code>! üèÜ\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{int(total)}</code>', parse_mode='HTML')
			except:
				pass
		else:
			pass
		query.edit_message_text(f'<code>Coinflip</code> üåï\n\n@{participant1[0]} <b>vs</b> @{participant2[0]}\n\n<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å</b>: @{winner}!\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{int(total)}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML', reply_markup=reply_markup)
		cursor.execute('UPDATE userz SET balance = balance + %s WHERE username = %s', (total, winner,))
		conn.commit()
	elif 'roulette' in query.data:
		query.edit_message_text('–ò–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')
	elif 'dice' in query.data:
		if str(query.from_user.id) in query.data:
			multiplier = query.data.split()
			if 'rules_dice' in query.data:
				query.answer(f'''–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Dice\n\n
1. –ò–≥—Ä–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–≥—Ä—ã.
2. –ë–æ—Ç —Ä–∞–Ω–¥–æ–º–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.
3. –ï—Å–ª–∏ —á–∏—Å–ª–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏.''', show_alert=True)
			elif 'int_dice' in query.data:
				query.answer(f'''–î–∏–∞–ø–∞–∑–æ–Ω—ã –≤—ã–∏–≥—Ä—ã—à–µ–π Dice\n\n
x2 - –æ—Ç 575 –¥–æ 1000,
x3 - –æ—Ç 716 –¥–æ 1000,
x5 - –æ—Ç 830 –¥–æ 1000,
x10 - –æ—Ç 915 –¥–æ 1000,
x50 - –æ—Ç 983 –¥–æ 1000.''', show_alert=True)
			elif '2x' in query.data and number >= 575:
				query.answer('‚úÖ')
				dice_win = int(betsumm)*2
				query.edit_message_text(f'<b>–ü–æ–±–µ–¥–∞!</b>\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML')
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE id = %s', (dice_win, query.from_user.id,))
				cursor.execute('UPDATE dstats SET total = total + %s WHERE multiplier = %s', (dice_win, '2x',))
				cursor.execute('UPDATE dstats SET games = games + 1 WHERE multiplier = %s', ('2x',))
				conn.commit()
			elif '3x' in query.data and number >= 716:
				query.answer('‚úÖ')
				dice_win = int(betsumm)*3
				query.edit_message_text(f'<b>–ü–æ–±–µ–¥–∞!</b>\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML')
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE id = %s', (dice_win, query.from_user.id,))
				cursor.execute('UPDATE dstats SET total = total + %s WHERE multiplier = %s', (dice_win, '3x',))
				cursor.execute('UPDATE dstats SET games = games + 1 WHERE multiplier = %s', ('3x',))
				conn.commit()
			elif '5x' in query.data and number >= 830:
				query.answer('‚úÖ')
				dice_win = int(betsumm)*5
				query.edit_message_text(f'<b>–ü–æ–±–µ–¥–∞!</b>\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML')
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE id = %s', (dice_win, query.from_user.id,))
				cursor.execute('UPDATE dstats SET total = total + %s WHERE multiplier = %s', (dice_win, '5x',))
				cursor.execute('UPDATE dstats SET games = games + 1 WHERE multiplier = %s', ('5x',))
				conn.commit()
			elif '10x' in query.data and number >= 915:
				query.answer('‚úÖ')
				dice_win = int(betsumm)*10
				query.edit_message_text(f'<b>–ü–æ–±–µ–¥–∞!</b>\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML')
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE id = %s', (dice_win, query.from_user.id,))
				cursor.execute('UPDATE dstats SET total = total + %s WHERE multiplier = %s', (dice_win, '10x',))
				cursor.execute('UPDATE dstats SET games = games + 1 WHERE multiplier = %s', ('10x',))
				conn.commit()
				context.bot.send_message(chat_id='@rylcoinmarket', text=f'üèÜ {query.from_user.full_name} —Å–ª–æ–≤–∏–ª(-–∞) <code>–î–∂–µ–∫–ø–æ—Ç</code>! üèÜ\n\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>10X</code>!\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code>!', parse_mode='HTML')
			elif '50x' in query.data and number >= 983:
				query.answer('‚úÖ')
				dice_win = int(betsumm)*50
				query.edit_message_text(f'<b>–ü–æ–±–µ–¥–∞!</b>\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code> –º–æ–Ω–µ—Ç!', parse_mode='HTML')
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE id = %s', (dice_win, query.from_user.id,))
				cursor.execute('UPDATE dstats SET total = total + %s WHERE multiplier = %s', (dice_win, '50x',))
				cursor.execute('UPDATE dstats SET games = games + 1 WHERE multiplier = %s', ('50x',))
				conn.commit()
				context.bot.send_message(chat_id='@rylcoinmarket', text=f'üë∏ {query.from_user.full_name} —Å–æ—Ä–≤–∞–ª(-–∞) <b>–ö—É—à</b>! üë∏\n\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>50X</code>!\n<b>–í—ã–∏–≥—Ä—ã—à</b>: <code>{dice_win}</code>!', parse_mode='HTML')
			else:
				query.answer('‚ùå')
				query.edit_message_text(f'<b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b> –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç :(\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</b>: <code>{multiplier[0]}</code>\n<b>–ß–∏—Å–ª–æ</b>: <code>{number}</code>\n<b>–°—Ç–∞–≤–∫–∞</b>: <code>{betsumm}</code> –º–æ–Ω–µ—Ç', parse_mode='HTML')
				cursor.execute(f'UPDATE dstats SET lost = lost - {betsumm} WHERE multiplier = {multiplier[0]}')
				cursor.execute(f'UPDATE dstats SET games = games + 1 WHERE multiplier = {multiplier[0]}')
				conn.commit()
		else:
			query.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é, –Ω–∞–ø–∏—à–∏: /dice', show_alert=True)
	else:
		query.edit_message_text('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.')


def dstats(update, context):
	cursor.execute('SELECT games, total, lost FROM dstats')
	info = cursor.fetchall()
	cursor.execute('SELECT SUM(games), SUM(total), SUM(lost) FROM dstats')
	results = cursor.fetchall()
	for stats in info:
# 		update.message.reply_text(f'''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:
# 2x: {stats[0]} <b>{stats[5]}</b> (<code>{stats[10]}</code>)
# 3x: {stats[1]} <b>{stats[6]}</b> (<code>{stats[11]}</code>)
# 5x: {stats[2]} <b>{stats[7]}</b> (<code>{stats[12]}</code>)
# 10x: {stats[3]} <b>{stats[8]}</b> (<code>{stats[13]}</code>)
# 50x: {stats[4]} <b>{stats[9]}</b> (<code>{stats[14]}</code>)''', parse_mode='HTML')
		update.message.reply_text(f'''–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º:
2x: {stats[0, 0]} <b>{stats[0, 1]}</b> (<code>{stats[0, 2]}</code>)
3x: {stats[1, 0]} <b>{stats[1, 1]}</b> (<code>{stats[1, 2]}</code>)
5x: {stats[2, 0]} <b>{stats[2, 1]}</b> (<code>{stats[2, 2]}</code>)
10x: {stats[3, 0]} <b>{stats[3, 1]}</b> (<code>{stats[3, 2]}</code>)
50x: {stats[4, 0]} <b>{stats[4, 1]}</b> (<code>{stats[4, 2]}</code>)''', parse_mode='HTML')
		update.message.reply_text(stats)
	for res in results:
		update.message.reply_text(f'–ò—Ç–æ–≥: {res[0]} <b>{res[1]}</b> (<code>{res[2]}</code>)', parse_mode='HTML')
	

@run_async
def anon(update, context):
	if update.message.chat_id == -1001441511504:
		update.message.reply_text('–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')

		return ConversationHandler.END
	else:
	    cursor.execute('SELECT id FROM userz')
	    all_users = cursor.fetchall()
	    userid = update.message.from_user.id
	    if str(userid) in str(all_users):
	        member1 = context.bot.get_chat_member(channel_username, userid)
	        if member1.status in memberslist:
	    	    context.user_data['message'] = update.message.reply_text('–ù–∞–∫–æ–Ω–µ—Ü —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ–µ ;)\n\n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: <code>100</code> –º–æ–Ω–µ—Ç.\n/cancel - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.', parse_mode='HTML')
	    	    context.user_data['user'] = update.message.from_user.full_name

	    	    return MESSAGE
	        else:
	            update.message.reply_text(f'–ù–µ–Ω–µ–Ω–µ, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞: {channel_username}')
		
	            return ConversationHandler.END
	    else:
	        update.message.reply_text('–°–ø–µ—Ä–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è (/reg)')
		
	        return ConversationHandler.END


@run_async
def anonMessage(update, context):
    user = context.user_data['user']
    message = update.message.text
    cursor.execute('SELECT balance FROM userz WHERE id = %s', (update.message.from_user.id,))
    balance = cursor.fetchone()
    if int(balance[0]) >= 100:
        cursor.execute('UPDATE userz SET balance = balance - 100 WHERE id = %s', (update.message.from_user.id,))
        conn.commit()
        context.bot.sendMessage(chat_id=-1001441511504, text=f'<b>–ö–∞–∫–æ–π-—Ç–æ –∞–Ω–æ–Ω –Ω–∞–ø–∏—Å–∞–ª(-–∞)</b>:\n{message}', parse_mode='HTML')
        context.bot.sendMessage(chat_id=391206263, text=f'<b>{user} –Ω–∞–ø–∏—Å–∞–ª(-–∞)</b>:\n{message}', parse_mode='HTML')

        return ConversationHandler.END
    else:
        update.message.reply_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')

        return ConversationHandler.END


@run_async
def cancel(update, context):
	message = context.user_data['message']
	context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–≠—Ö! –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:(')
	context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

	return ConversationHandler.END


def echo(update, context):
	if ('!add' in update.message.text) or ('!remove' in update.message.text):
		message = update.message.text
		args = message.split()
		cursor.execute('SELECT balance FROM userz WHERE username = %s', (args[1],))
		balance = cursor.fetchone()
		cursor.execute('SELECT username FROM userz')
		all_users = cursor.fetchall()
		if args[1] not in str(all_users):
			update.message.reply_text('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
		elif '!add' in update.message.text:
			try:
				cursor.execute('UPDATE userz SET balance = balance + %s WHERE username = %s', (args[2], args[1],))
				conn.commit()
				context.bot.send_message(chat_id='@rylcoinmarket', text=f'<code>[Deposit]</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{args[1]} –≤–Ω—ë—Å {args[2]} –º–æ–Ω–µ—Ç –Ω–∞ —Å–≤–æ–π —Å—á—ë—Ç.', parse_mode='HTML')
			except:
				update.message.reply_text('Error add')
		elif '!remove' in update.message.text:
			if balance[0] >= int(args[2]):
				try:
					cursor.execute('UPDATE userz SET balance = balance - %s WHERE username = %s', (args[2], args[1],))
					conn.commit()
					context.bot.send_message(chat_id='@rylcoinmarket', text=f'<code>[Withdraw]</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{args[1]} –≤—ã–≤–µ–ª {args[2]} –º–æ–Ω–µ—Ç.', parse_mode='HTML')
				except:
					update.message.reply_text('Error remove')
			else:
				update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.')
		else:
			pass
	elif ('!drefresh' in update.message.text):
		cursor.execute('UPDATE dstats SET games, total, lost VALUES (0, 0, 0)')
		conn.commit()
	else:
		pass


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    # TOKEN='683044036:AAGM___X_lK52LDR1SmiTCOvcjdHRh2cYkY'
    # updater = Updater('683044036:AAGM___X_lK52LDR1SmiTCOvcjdHRh2cYkY', use_context=True)
    updater = Updater(os.environ['token'], request_kwargs={'read_timeout': 20, 'connect_timeout': 20}, use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    # dp.add_handler(MessageHandler(Filters.text, echo))
    dp.add_handler(CommandHandler("tos", tos))
    dp.add_handler(CommandHandler("dstats", dstats))
    dp.add_handler(CommandHandler("deposit", deposit))
    dp.add_handler(CommandHandler("withdraw", withdraw))
    dp.add_handler(CommandHandler("promo", getPromo))
    dp.add_handler(CommandHandler("info", getInfo))
    dp.add_handler(CommandHandler("reg", registration))
    dp.add_handler(CallbackQueryHandler(button))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("anon", anon),
        			  CommandHandler("coinflip", coinflip),
        			  CommandHandler("roulette", roulette),
        			  CommandHandler("dice", dice)],

    states={
           	MESSAGE: [MessageHandler(Filters.text, anonMessage)],
           	TOTAL: [MessageHandler(Filters.text, Total)],
           	DICE: [MessageHandler(Filters.text | Filters.group, dice_start)]
        },

        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(MessageHandler(Filters.text & Filters.user(username="@daaetoya"), echo))

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Block until the user presses Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
