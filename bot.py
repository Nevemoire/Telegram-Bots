#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those
functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
import random
import psycopg2
import os
import time
import string
from uuid import uuid4
from functools import wraps

from telegram import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Updater, CommandHandler, MessageHandler, InlineQueryHandler, CallbackQueryHandler, Filters

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


conn = psycopg2.connect(dbname=os.environ['dbname'], user=os.environ['user'], password=os.environ['password'],
                        host=os.environ['host'])
# conn = psycopg2.connect(dbname='d19olitilh6q1s', user='oukggnzlpirgzh', password='a4e84b7de4257e36cecc14b60bb0ff570f7ce52d5d24b1c7eb275c96f403af36',
#                         host='ec2-79-125-23-20.eu-west-1.compute.amazonaws.com')
cursor = conn.cursor()

all_user_data = set()

privet = ['–°–∞–ª–∞–º –∞–ª–µ–π–∫—É–º', 'Hi', 'Merhaba', 'Hola', '–ü—Ä—ã–≤–∏—Ç–∞–Ω–Ω–µ', '–ó–¥—Ä–∞–≤–µ–π—Ç–µ', 'Chao', 'Aloha', '–ì–∞–º–∞—Ä–¥–∂–æ–±–∞', 'Shalom', 'Ave', 'Guten Tag', '–ü—Ä–∏–≤—ñ—Ç', '–ü—Ä–∏–≤–µ—Ç', 'Namaste', 'Bonjour', 'Konnichi wa']
LIST_OF_ADMINS = [391206263]
channel_username = '@theclownfiesta'
ch1 = '@theclownfiesta'
# ch2 = '@rsmgram'
memberz = 'creator, administrator, member'
memberslist = memberz.split(', ')


def restricted(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in LIST_OF_ADMINS:
            print("Unauthorized access denied for {}.".format(user_id))
            return
        return func(update, context, *args, **kwargs)
    return wrapped


@restricted
def ban(update, context):
    target = update.message.reply_to_message.from_user.id
    cursor.execute('UPDATE users SET banned = 1 WHERE id = %s', (target,))
    conn.commit()
    update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.')


@restricted
def unban(update, context):
    target = update.message.reply_to_message.from_user.id
    cursor.execute('UPDATE users SET banned = 0 WHERE id = %s', (target,))
    conn.commit()
    update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.')


@restricted
def message(update, context):
    keyboard = [[InlineKeyboardButton("–û–±—Å—É–¥–∏—Ç—å üôã", url="t.me/clownfiestachat")], [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", url="t.me/theclownfiesta")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    s = update.message.text
    cursor.execute('SELECT id FROM chats')
    ids = cursor.fetchall()
    for chats in ids:
        try:
            context.bot.send_message(chat_id=chats[0], text=s.split(' ', 1)[1], reply_markup=reply_markup)
        except:
            cursor.execute("UPDATE chats SET unable = 1 WHERE id = %s", (chats[0],))


@restricted
def compensate(update, context):
    cursor.execute("UPDATE users SET exp = exp + 1004")
    conn.commit()
    update.message.reply_text('–ì–æ—Ç–æ–≤–æ!')


@restricted
def stats(update, context):
    cursor.execute('SELECT id from chats')
    ids = cursor.fetchall() 
    for chats in ids:
        try:
            chatUsers = context.bot.get_chat_members_count(chats[0])
            cursor.execute('UPDATE chats SET users = %s WHERE id = %s', (chatUsers, chats[0],))
            conn.commit()
        except:
            cursor.execute('UPDATE chats SET unable = 2 WHERE id = %s', (chats[0],))
            conn.commit()
    cursor.execute('SELECT COUNT(id) FROM users')
    allUsers = cursor.fetchone()
    cursor.execute('SELECT COUNT(id), SUM(users) FROM chats')
    info = cursor.fetchone()
    update.message.reply_text(f'–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {info[0]}\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {info[1]}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {allUsers[0]}')


def raffle(update, context):
    keyboard = [[InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é!", callback_data=f"giveaway {update.message.from_user.id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    date = context.args[0]
    # context.bot.send_message(chat_id=-437611665, text=f'–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n–ú—ã —Ç—É—Ç —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à, –ø–æ–∫–∞ –≤—ã —Å–∫—É—á–∞–µ—Ç–µ –¥–æ–º–∞!\n\n–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:\n1. –ë–ª–∞–±–ª–∞\n2. –ë–ª–∞–±–ª–∞\n3. –ë–ª–∞–±–ª–∞\n\n–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:\n@theclownfiesta\n@rsmgram\n–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤—É—é!"')
    context.user_data['raffle'] = context.bot.send_message(chat_id='@theclownfiesta', text=f'...\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã {date}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0', reply_markup=reply_markup)
    cursor.execute('UPDATE users SET raffle = 0')
    cursor.execute('INSERT INTO raffles (id, participants, date_end, message_id, chat_id) VALUES (%s, 0, %s, %s, %s)', (update.message.from_user.id, date, context.user_data['raffle'].message_id, context.user_data['raffle'].chat_id,))
    conn.commit()


def raffleWinners(update, context):
    text = '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n'
    num = 0
    for winner in range(3):
        cursor.execute('SELECT id, name FROM users WHERE raffle = 1 ORDER BY random()')
        info = cursor.fetchone()
        cursor.execute('UPDATE users SET raffle = 2 WHERE id = %s', (info[0],))
        conn.commit()
        num += 1
        text += f'{num}) <a href="tg://user?id={info[0]}">{info[1]}</a>\n'
    update.message.reply_text(text, parse_mode='HTML')


def get_admin_ids(bot, chat_id):
    """Returns a list of admin IDs for a given chat. Results are cached for 1 hour."""
    return [admin.user.id for admin in bot.get_chat_administrators(chat_id)]


def get_word(fname):
    lines = open(fname).read().splitlines()
    return random.choice(lines)


def new_user(update, context):
    for member in update.message.new_chat_members:
        if member.id != context.bot.get_me().id:
            logger.info('hey user')
            cursor.execute('SELECT id, link FROM hello ORDER BY random() LIMIT 1')
            hgif = cursor.fetchall()
            newhello = hgif[0]
            tLink = newhello[1]
            context.bot.send_animation(chat_id=update.message.chat_id, animation=newhello[0], caption=f'{random.choice(privet)}, {update.message.from_user.full_name}!\nüì∏: <a href="twitch.tv/{tLink}">{tLink}</a>', parse_mode="HTML")
            cursor.execute('SELECT id from users')
            all_ids = cursor.fetchall()
            if str(member.id) not in str(all_ids):
                name = update.message.from_user.full_name
                cur_time = int(time.time())
                registered = time.strftime('%d.%m.%y')
                cursor.execute('INSERT INTO users (id, name, lastmsg, registered) VALUES (%s, %s, %s, %s)', (member.id, name, cur_time, registered,))
                conn.commit()
                logger.info(f'New invited user {update.message.from_user.full_name}!')
            else:
                pass
        elif member.id == context.bot.get_me().id:
            logger.info('hey chat')
            userscount = context.bot.get_chat_members_count(update.message.chat.id)
            name = update.message.chat.title
            chatid = update.message.chat_id
            cursor.execute('SELECT id FROM chats')
            chats = cursor.fetchall()
            if str(chatid) in str(chats):
                logger.info('here we go again...')
                update.message.reply_text('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∏–ª–∏ —è —É–∂–µ –±—ã–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ? –û—Å—É–∂–¥–∞—é.\n\n–õ–∞–¥–Ω–æ, –ª–∞–¥–Ω–æ. –Ø –Ω–µ –∑–ª–æ–ø–∞–º—è—Ç–Ω—ã–π, –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.')
                cursor.execute('UPDATE chats SET name = %s, users = %s, unable = 0 WHERE id = %s', (name, userscount, chatid,))
                context.bot.send_message(chat_id=391206263, text=f'–ë–æ—Ç–∞ —Å–Ω–æ–≤–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ {name} ({userscount})!')
                conn.commit()
            elif str(chatid) not in str(chats):
                logger.info('hola amigos')
                cursor.execute('INSERT INTO chats (id, users, name) VALUES (%s, %s, %s)', (chatid, userscount, name,))
                context.bot.send_message(chat_id=391206263, text=f'–ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ {name} ({userscount})!')
                update.message.reply_text("""
–í—Å–µ–º –ø–∏—Å –≤ —ç—Ç–æ–º —á–∞—Ç–∏–∫–µ!
–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —è –±—É–¥—É –≤–∞—Å —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å.

–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥: /help
–ù–æ–≤–æ—Å—Ç–∏, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ —Ç.–ø. –∑–¥–µ—Å—å: @theclownfiesta""")
                conn.commit()
            else:
                update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        else:
            pass


def set_exp(context):
    cur_time = int(time.time())
    exp_time = cur_time - 600
    cursor.execute('UPDATE users SET exp = exp + 10 WHERE lastmsg >= %s', (exp_time,))
    conn.commit()
    logger.info('Set exp done!')


def krokodie(context):
    context.bot.send_message(chat_id=context.job.context, text='–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ - /krokodil')
    cursor.execute('UPDATE games SET state = 2 WHERE chatid = %s', (context.job.context,))
    conn.commit()


def krokoreload(context):
    cursor.execute('UPDATE games SET state = 0')
    conn.commit()


def hGif(update, context):
    fID = update.message.document.file_id
    update.message.reply_text(fID)
    cursor.execute('INSERT INTO hello (id) VALUES (%s)', (fID,))
    conn.commit()
    logger.info('New hi gif')


def pussy(update, context):
    try:
        fID = update.message.photo[-1].file_id
        fType = "photo"
    except:
        fID = update.message.document.file_id
        fType = "gif"
    update.message.reply_text(f'{fID} ({fType})')
    cursor.execute('INSERT INTO pussy (id, type) VALUES (%s, %s)', (fID, fType,))
    conn.commit()


def showPussy(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        cursor.execute('SELECT id, type FROM pussy ORDER BY random() LIMIT 1')
        pussy = cursor.fetchall()
        pussies = pussy[0]
        if pussies[1] == 'photo':
            context.bot.send_photo(chat_id=update.message.chat_id, photo=pussies[0], caption='@theClownfiesta')
        elif pussies[1] == 'gif':
            context.bot.send_animation(chat_id=update.message.chat_id, animation=pussies[0], caption='@theClownfiesta')
        else:
            logger.info('GIF/PHOTO ERROR')
    else:
        pass


def memes(update, context):
    try:
        fID = update.message.photo[-1].file_id
        fType = "photo"
    except:
        fID = update.message.document.file_id
        fType = "gif"
    update.message.reply_text(f'{fID} ({fType})')
    cursor.execute('INSERT INTO memes (id, type) VALUES (%s, %s)', (fID, fType,))
    conn.commit()


def showMemes(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        cursor.execute('SELECT id, type FROM memes ORDER BY random() LIMIT 1')
        meme = cursor.fetchall()
        memes = meme[0]
        if memes[1] == 'photo':
            context.bot.send_photo(chat_id=update.message.chat_id, photo=memes[0], caption='@mem_hunter')
        elif memes[1] == 'gif':
            context.bot.send_animation(chat_id=update.message.chat_id, animation=memes[0], caption=f'@mem_hunter')
        else:
            logger.info('GIF/PHOTO ERROR')
    else:
        pass


def twitch(update, context):
    fID = update.message.video.file_id
    update.message.reply_text(fID)
    cursor.execute('INSERT INTO clips (id) VALUES (%s)', (fID,))
    conn.commit()


def showTwitch(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        fCap = "–õ—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã <b>Twitch</b>'a: @osuzhdaiu"
        cursor.execute('SELECT id FROM clips ORDER BY random() LIMIT 1')
        clip = cursor.fetchone()
        context.bot.send_video(chat_id=update.message.chat_id, video=clip[0], caption=fCap, parse_mode='HTML')
    else:
        pass


def start(update, context):
    """Send a message when the command /start is issued."""
    ids = update.message.from_user.id
    cursor.execute('SELECT id FROM users')
    all_users = cursor.fetchall()
    none = 'None'
    if str(ids) in str(all_users):
        try:
            text = context.args[0]
        except:
            update.message.reply_text('Meow')
        if text == 'osuzhdaiu':
            cursor.execute('SELECT vt FROM users WHERE id = %s', (ids,))
            subscribed = cursor.fetchone()
            if none in str(subscribed[0]):
                try:
                    member = context.bot.get_chat_member(-1001415515636, ids)
                    if member.status in memberslist:
                        cursor.execute('UPDATE users SET exp = exp + 1000, vt = %s WHERE id = %s', (ids, ids,))
                        conn.commit()
                        update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! (+1000 –º–æ–Ω–µ—Ç)')
                        logger.info('Sub osuzhdaiu')
                    else:
                        update.message.reply_text('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
                except:
                    update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
            else:
                update.message.reply_text('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!')
        elif text == 'theclownfiesta':
            cursor.execute('SELECT thecf FROM users WHERE id = %s', (ids,))
            subscribed = cursor.fetchone()
            if none in str(subscribed[0]):
                try:
                    member = context.bot.get_chat_member('@theclownfiesta', ids)
                    if member.status in memberslist:
                        cursor.execute('UPDATE users SET exp = exp + 1000, thecf = %s WHERE id = %s', (ids, ids,))
                        conn.commit()
                        update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! (+1000 –º–æ–Ω–µ—Ç)')
                        logger.info('Sub theclownfiesta')
                    else:
                        update.message.reply_text('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
                except:
                    update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
            else:
                update.message.reply_text('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!')
        elif text == 'mem_hunter':
            cursor.execute('SELECT mh FROM users WHERE id = %s', (ids,))
            subscribed = cursor.fetchone()
            if none in str(subscribed[0]):
                try:
                    member = context.bot.get_chat_member('@mem_hunter', ids)
                    if member.status in memberslist:
                        cursor.execute('UPDATE users SET exp = exp + 1000, mh = %s WHERE id = %s', (ids, ids,))
                        conn.commit()
                        update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! (+1000 –º–æ–Ω–µ—Ç)')
                        logger.info('Sub mem_hunter')
                    else:
                        update.message.reply_text('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
                except:
                    update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
            else:
                update.message.reply_text('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!')
        elif text == 'nvmrstuff':
            cursor.execute('SELECT nvmr FROM users WHERE id = %s', (ids,))
            subscribed = cursor.fetchone()
            if none in str(subscribed[0]):
                try:
                    member = context.bot.get_chat_member('@nvmrstuff', ids)
                    if member.status in memberslist:
                        cursor.execute('UPDATE users SET exp = exp + 1000, nvmr = %s WHERE id = %s', (ids, ids,))
                        conn.commit()
                        update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! (+1000 –º–æ–Ω–µ—Ç)')
                        logger.info('Sub nvmr')
                    else:
                        update.message.reply_text('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.')
                except:
                    update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.')
            else:
                update.message.reply_text('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!')
        else:
            update.message.reply_text('Meow')
    elif str(ids) not in str(all_users):
        update.message.reply_text('–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –≥–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç @clownfiestabot!', parse_mode='HTML')


def checkquery(update, context):
    """Handle the inline query."""
    query = update.inline_query
    name = update.inline_query.from_user.full_name
    id_int = update.inline_query.from_user.id
    ids = str(id_int)
    cursor.execute('SELECT id FROM users')
    members = cursor.fetchall()
    if ids in str(members):
        # if ids not in all_user_data:
        possible_chars = string.ascii_uppercase + string.digits + string.ascii_lowercase
        check_hash = ''.join(random.choice(possible_chars) for x in range(10))
        # all_user_data = check_hash
        all_user_data.add(ids)
        keyboard = [[InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'cheque {check_hash} {query.from_user.id} {query.query}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = query.query
        cursor.execute('SELECT exp FROM users WHERE id = %s', (query.from_user.id,))
        balance = cursor.fetchone()
        try:
            if int(query.query) > int(balance[0]):
                results = [
                    InlineQueryResultArticle(
                        id=uuid4(),
                        title="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                        description="–ñ–∞–ª—å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫ –Ω–∞ —ç—Ç—É —Å—É–º–º—É:(",
                        thumb_url="https://i.pinimg.com/originals/49/0d/c0/490dc04a6916f957f560297b919b330a.jpg",
                        input_message_content=InputTextMessageContent('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ :('))]
            elif int(query.query) < 100:
                results = [
                    InlineQueryResultArticle(
                        id=uuid4(),
                        title="–ú–∏–Ω. —Å—É–º–º–∞ —á–µ–∫–∞: 100 –º–æ–Ω–µ—Ç",
                        description="–ñ–∞–ª—å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫ –Ω–∞ —ç—Ç—É —Å—É–º–º—É:(",
                        thumb_url="https://i.pinimg.com/originals/49/0d/c0/490dc04a6916f957f560297b919b330a.jpg",
                        input_message_content=InputTextMessageContent('–£–ø—Å, –æ—à–∏–±–∫–∞ :('))]
            else:
                results = [
                    InlineQueryResultArticle(
                        id=uuid4(),
                        title=f"–ß–µ–∫ –Ω–∞ —Å—É–º–º—É {query.query} –º–æ–Ω–µ—Ç.",
                        description=f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {int(balance[0])-int(query.query)} –º–æ–Ω–µ—Ç.",
                        thumb_url="https://i.pinimg.com/originals/ee/d5/19/eed519321feadb35c297ddd3ec14b397.png",
                        reply_markup=reply_markup,
                        input_message_content=InputTextMessageContent(f'–û—Ç: {name}\n–ß–µ–∫ –Ω–∞: {query.query} –º–æ–Ω–µ—Ç.'))]
        except:
            results = [
                    InlineQueryResultArticle(
                        id=uuid4(),
                        title=f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞",
                        description=f"–ë–∞–ª–∞–Ω—Å: {balance[0]} –º–æ–Ω–µ—Ç.",
                        thumb_url="https://i.pinimg.com/originals/ee/d5/19/eed519321feadb35c297ddd3ec14b397.png",
                        input_message_content=InputTextMessageContent('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?)'))]

        query.answer(results, cache_time=0, is_personal=True)
        # elif ids in all_user_data:
        #     results = [
        #                 InlineQueryResultArticle(
        #                     id=uuid4(),
        #                     title=f"–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
        #                     description=f"–ë–∞–ª–∞–Ω—Å: {balance[0]} –º–æ–Ω–µ—Ç.",
        #                     thumb_url="https://i.pinimg.com/originals/ee/d5/19/eed519321feadb35c297ddd3ec14b397.png",
        #                     input_message_content=InputTextMessageContent('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?)'))]
        #     query.answer(results, cache_time=0, is_personal=True)


def bets(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        ids = update.message.from_user.id
        cursor.execute('SELECT id FROM users')
        members = cursor.fetchall()
        if str(ids) in str(members):
            cursor.execute('SELECT exp, bet FROM users WHERE id = %s', (update.message.from_user.id,))
            betinfo = cursor.fetchone()
            balance = int(betinfo[0])
            bet = int(betinfo[1])
            dice = update.message.dice.value
            if dice <= 6:
                if bet == 0:
                    pass
                else:
                    if balance >= bet:
                        if dice <= 3:
                            update.message.reply_text(f'–ü—Ä–æ–∏–≥—Ä—ã—à! (-{bet} –º–æ–Ω–µ—Ç)\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {dice}')
                            cursor.execute('UPDATE users SET exp = exp - %s, total_bet = total_bet + %s WHERE id = %s', (bet, bet, ids,))
                            conn.commit()
                        elif dice > 3:
                            update.message.reply_text(f'–í—ã–∏–≥—Ä—ã—à! (+{bet} –º–æ–Ω–µ—Ç)\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {dice}')
                            cursor.execute('UPDATE users SET exp = exp + %s, total_bet = total_bet + %s WHERE id = %s', (bet, bet, ids,))
                            conn.commit()
                        else:
                            update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!')
                    elif balance < bet:
                        update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!')
                    else:
                        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!')
            else:
                update.message.reply_text('–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–≥—Ä—ã –≥–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º 6 :(')
        else:
            update.message.reply_text('–¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç!" –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:)')
    else:
        pass


# def bets_soon(update, context):
#     update.message.reply_text('–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è :(')


def setBet(update, context):
    # update.message.reply_text('–°—Ç–∞–≤–∫–∏ –∏ –≤—Å—ë —á—Ç–æ —Å –Ω–∏–º–∏ —Å–≤—è–∑–∞–Ω–æ —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å: @NevermoreBets.\n–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π —ç–∫—Å–ø–∏—Ä–∏–µ–Ω—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, –∑–∞–ª–µ—Ç–∞–π—Ç–µ!')
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        ids = update.message.from_user.id
        cursor.execute('SELECT id FROM users')
        members = cursor.fetchall()
        if str(ids) in str(members):
            member = context.bot.get_chat_member(channel_username, ids)
            if member.status in memberslist:
                maxBet = 1000000
            else:
                maxBet = 1000
            user_says = context.args
            try:
                bet = int(user_says[0])
                if (bet == 0) or (bet >= 10) and (bet <= maxBet):
                    cursor.execute('UPDATE users SET bet = %s WHERE id = %s', (bet, ids,))
                    conn.commit()
                    update.message.reply_text('–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –ø—Ä–∏—à–ª–∏ –≤ —á–∞—Ç —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏: üé≤')
                else:
                    update.message.reply_text(f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç\n–ú–∞–∫—Å. —Å—Ç–∞–≤–∫–∞: 1000 –º–æ–Ω–µ—Ç –∏–ª–∏ 1.000.000 –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_username}\n–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø–∏—à–∏: /bet 0')
            except:
                update.message.reply_text('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/bet <–ß–ò–°–õ–û>,\n\n–≥–¥–µ <–ß–ò–°–õ–û> - —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏.\n–û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏: /bet 0')
        else:
            update.message.reply_text('–¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç!" –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:)')
    else:
        pass


def pidor(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        try:
            cursor.execute('SELECT pidor_total, pidor_last FROM chats WHERE id = %s', (update.message.chat_id,))
            pInfo = cursor.fetchone()
            if 'pidor' in context.chat_data:
                pidor = context.chat_data['pidor']
                update.message.reply_text(f'–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ì–µ–π—Ç—Å —á–∏–ø–∏—Ä–æ–≤–∞–ª {pidor}')
            elif int(pInfo[0]) > 0:
                update.message.reply_text(f'–í –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ì–µ–π—Ç—Å —á–∏–ø–∏—Ä–æ–≤–∞–ª {pInfo[1]}')
            else:
                update.message.reply_text('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ —á–∏–ø–∏—Ä–æ–≤–∞–ª–∏.')
        except IndexError as error:
            update.message.reply_text('–ü–∞—Ä–∞–º-–ø–∞—Ä–∞-–ø–∞. –ü–∞—É! –≠—Ç–æ—Ç —á–∞—Ç –ø–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –∑–µ–ª—ë–Ω—ã–π.')
        except:
            update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏-–∏-–∏-–±... (System Error)')
    else:
        pass


def gay(update, context):
    update.message.reply_text(f'–¢—ã –≥—ç–π –Ω–∞ {random.randint(1,100)}%! üè≥Ô∏è‚Äçüåà')


def chlen(update, context):
    chance = random.randint(1,3)
    chlen = random.randint(1,10)
    chlen_date = time.strftime('%d.%m.%y')
    cursor.execute('SELECT from USERS chlen_date WHERE id = %s', (update.message.from_user.id,))
    chlen_last = cursor.fetchone()
    if chlen_date not in chlen_last:
        if chance == 1:
            cursor.execute('UPDATE users SET chlen = chlen - %s, chlen_date = %s WHERE id = %s', (chlen, chlen_date, update.message.from_user.id,))
            update.message.reply_text(f'–¢–≤–æ–π —á–ª–µ–Ω —É–∫–æ—Ä–æ—Ç–∏–ª—Å—è –Ω–∞ {chlen} –º–º!')
        else:
            cursor.execute('UPDATE users SET chlen = chlen + %s, chlen_date = %s WHERE id = %s', (chlen, chlen_date, update.message.from_user.id,))
            update.message.reply_text(f'–¢–≤–æ–π —á–ª–µ–Ω –≤—ã—Ä–æ—Å –Ω–∞ {chlen} –º–º!')
        conn.commit()
    else:    
        cursor.execute('SELECT chlen FROM users WHERE id = %s', (update.message.from_user.id,))
        clength = cursor.fetchone()
        update.message.reply_text(f'–î–ª–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ —á–ª–µ–Ω–∞: {int(clength)/100} —Å–º!')


def pidor_toggle(update, context):
    try:
        if update.effective_user.id in get_admin_ids(context.bot, update.message.chat_id):
            cursor.execute('SELECT pidor_state FROM chats WHERE id = %s', (update.message.chat_id,))
            pState = cursor.fetchone()
            if '1' in str(pState[0]):
                cursor.execute('UPDATE chats SET pidor_state = 0 WHERE id = %s', (update.message.chat_id,))
                update.message.reply_text('–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —Ä–æ–∑–¥–∞–Ω–æ –ø–æ —à–∞–ø–æ—á–∫–µ –∏–∑ —Ñ–æ–ª—å–≥–∏!')
            elif '0' in str(pState[0]):
                cursor.execute('UPDATE chats SET pidor_state = 1 WHERE id = %s', (update.message.chat_id,))
                update.message.reply_text('–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —à–∞–ø–æ—á–µ–∫ –∏–∑ —Ñ–æ–ª—å–≥–∏, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã —á–∏–ø–∏–∑–∞—Ü–∏–∏!')
            else:
                update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
            conn.commit()
        else:
            update.message.reply_text('–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞.')
    except:
        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')


def krokodil(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        try:
            cursor.execute('SELECT state FROM games WHERE chatid = %s', (update.message.chat_id,))
            state = cursor.fetchone()
            if ('0' in str(state[0])) or ('2' in str(state[0])):
                cursor.execute('UPDATE games SET total = total + 1 WHERE chatid = %s', (update.message.chat_id,))
                conn.commit()
                cursor.execute('SELECT total FROM games WHERE chatid = %s', (update.message.chat_id,))
                gameid = cursor.fetchone()
                keyboard = [[InlineKeyboardButton("–°–ª–æ–≤–æ", callback_data=f'krokoword {update.message.from_user.id} {gameid[0]}')], [InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å (-5 –º–æ–Ω–µ—Ç)", callback_data=f'krokochange {update.message.from_user.id} {gameid[0]}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                invoker = update.message.from_user.full_name
                context.chat_data['krokoword'] = (get_word('russian.txt'))
                context.chat_data['message'] = update.message.reply_text(f'–ò–≥—Ä–∞ #{gameid[0]}\n–û–±—ä—è—Å–Ω—è–µ—Ç: {invoker}\n–í—Ä–µ–º–µ–Ω–∏: 2 –º–∏–Ω—É—Ç—ã', reply_markup=reply_markup)
                context.chat_data['kroko_job'] = context.job_queue.run_once(krokodie, 120, context=update.message.chat_id)
                context.chat_data['kroko_inv'] = update.message.from_user.id
                context.chat_data['kroko_iname'] = update.message.from_user.full_name
                cursor.execute('UPDATE games SET state = 1 WHERE chatid = %s', (update.message.chat_id,))
                conn.commit()
            elif '1' in str(state[0]):
                update.message.reply_text('–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!')
            else:
                update.message.reply_text('Error!')
        except:
            cursor.execute('INSERT INTO games (chatid, state) VALUES (%s, 0)', (update.message.chat_id,))
            conn.commit()
            update.message.reply_text('–ß–∞—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /krokodil –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.')
    else:
        pass


def fbi(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        context.bot.send_animation(chat_id=update.message.chat_id, animation='CgACAgIAAxkBAAIBrF6MQgz-TZJXda7BWdgFSZfY1LAOAAIVAwACuzWoSw_3NpLvCy0dGAQ')
    else:
        pass


def babki(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        cursor.execute('SELECT exp FROM users WHERE id = %s', (update.message.from_user.id,))
        babki = cursor.fetchone()
        update.message.reply_text(f'–£ —Ç–µ–±—è {babki[0]} –º–æ–Ω–µ—Ç!')
    else:
        pass


def tip(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        try:
            target = update.message.reply_to_message.from_user.id
            tName = update.message.reply_to_message.from_user.full_name
            ids = update.message.from_user.id
            iName = update.message.from_user.full_name
            cursor.execute('SELECT id FROM users')
            members = cursor.fetchall()
            if (str(ids) in str(members)) and (str(target) in str(members)):
                member = context.bot.get_chat_member(channel_username, ids)
                if member.status in memberslist:
                    maxTip = 1000000
                else:
                    maxTip = 1000
                user_says = context.args
                try:
                    amount = int(user_says[0])
                except:
                    update.message.reply_text('–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞.')
                    return
                cursor.execute('SELECT exp FROM users WHERE id = %s', (ids,))
                balance = cursor.fetchone()
                if (amount < 10) or (amount > maxTip):
                    update.message.reply_text(f'–û—à–∏–±–∫–∞!\n–ú–∏–Ω. –ø–µ—Ä–µ–≤–æ–¥: 10 –º–æ–Ω–µ—Ç, –º–∞–∫—Å. –ø–µ—Ä–µ–≤–æ–¥: 1000 –º–æ–Ω–µ—Ç –∏–ª–∏ 1.000.000 –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {channel_username} –∑–∞ —Ä–∞–∑.')
                elif str(ids) in str(target):
                    update.message.reply_text('–û—á–µ–Ω—å —Å–º–µ—à–Ω–æ. ü§®')
                elif amount > int(balance[0]):
                    update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                elif ((amount >= 10) and (amount <= maxTip)) and amount <= int(balance[0]):
                    cursor.execute('UPDATE users SET exp = exp - %s, total_tipped = total_tipped + %s WHERE id = %s', (amount, amount, ids,))
                    cursor.execute('UPDATE users SET exp = exp + %s, total_recieved = total_recieved + %s WHERE id = %s', (amount, amount, target,))
                    conn.commit()
                    update.message.reply_text(f'<code>{iName}</code> —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç <code>{tName}</code> <b>{amount}</b> –º–æ–Ω–µ—Ç.', parse_mode='HTML')
            else:
                update.message.reply_text('–û—à–∏–±–∫–∞! –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        except:
            update.message.reply_text('–û—à–∏–±–∫–∞! –£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Å—è, —á—Ç–æ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–ø.')
    else:
        pass


def button(update, context):
    query = update.callback_query
    cursor.execute('SELECT banned FROM users WHERE id = %s', (query.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        if ('krokoword' in query.data) or ('krokochange' in query.data):
            data = query.data.split()
            gId = data[2]
            cursor.execute('SELECT total FROM games WHERE chatid = %s', (query.message.chat_id,))
            gameid = cursor.fetchone()
            if str(gId) == str(gameid[0]):
                if ('krokoword' in query.data) and (str(query.from_user.id) in query.data):
                    query.answer(f'{context.chat_data["krokoword"]}', show_alert=True)
                elif ('krokochange' in query.data) and (str(query.from_user.id) in query.data):
                    logger.info('yes')
                    cursor.execute('SELECT exp FROM users WHERE  id = %s', (query.from_user.id,))
                    balancez = cursor.fetchone()
                    balance = int(balancez[0])
                    if balance >= 5:
                        logger.info('byes')
                        context.chat_data['krokoword'] = (get_word('russian.txt'))
                        query.answer(f'–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ: {context.chat_data["krokoword"]}', show_alert=True)
                        cursor.execute('UPDATE users SET exp = exp - 5 WHERE id = %s', (query.from_user.id,))
                        conn.commit()
                    else:
                        query.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', show_alert=True)
                elif str(query.from_user.id) not in query.data:
                    query.answer(f'–í –æ—á–µ—Ä–µ–¥—å!\n–°–µ–π—á–∞—Å –æ–±—ä—è—Å–Ω—è–µ—Ç: {context.chat_data["kroko_iname"]}', show_alert=True)
            else:
                query.answer('–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!', show_alert=True)
        elif 'cheque' in query.data:
            if (str(query.from_user.id) not in query.data):
                cursor.execute('SELECT id FROM users')
                members = cursor.fetchall()
                if str(query.from_user.id) in str(members):
                    data = query.data.split()
                    qHash = data[1]
                    qInvoker = data[2]
                    qAmount = data[3]
                    qTime = int(time.time())
                    if qInvoker in all_user_data:
                        all_user_data.remove(qInvoker)
                        logger.info(f'From: {qInvoker}, Hash: {qHash}, SUMM: {qAmount}')
                        cursor.execute('SELECT exp FROM users WHERE id = %s', (qInvoker,))
                        balance = cursor.fetchone()
                        if int(qAmount) <= int(balance[0]):
                            # query.edit_message_text()
                            # cursor.execute('INSERT INTO cheques (hash, invoker, reciever, amount, ttime) VALUES (%s, %s, %s, %s, %s)', (qHash, qInvoker, query.from_user.id, qAmount, qTime,))
                            cursor.execute('UPDATE users SET exp = exp - %s, total_tipped = total_tipped + %s WHERE id = %s', (qAmount, qAmount, qInvoker,))
                            cursor.execute('UPDATE users SET exp = exp + %s, total_recieved = total_recieved + %s WHERE id = %s', (qAmount, qAmount, query.from_user.id,))
                            conn.commit()
                            logger.info('Transaction done!')
                            query.answer('–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', show_alert=True)
                        else:
                            query.answer('–û—à–∏–±–∫–∞!', show_alert=True)
                    elif qInvoker not in all_user_data:
                        query.answer('–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏.', show_alert=True)
                    else:
                        query.answer('–û—à–∏–±–∫–∞!', show_alert=True)
                else:
                    query.answer('–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!', show_alert=True)
            elif (str(query.from_user.id) in query.data):
                query.answer('–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–∫!', show_alert=True)
            else:
                query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', show_alert=True)
        elif 'giveaway' in query.data:
            cursor.execute('SELECT id FROM users')
            members = cursor.fetchall()
            if str(query.from_user.id) in str(members):
                member1 = context.bot.get_chat_member(ch1, query.from_user.id)
                # member2 = context.bot.get_chat_member(ch2, query.from_user.id)
                if (member1.status in memberslist):
                # if (member1.status in memberslist) and (member2.status in memberslist):
                    cursor.execute('SELECT raffle FROM users WHERE id = %s', (query.from_user.id,))
                    raffle = cursor.fetchone()
                    if '0' in str(raffle[0]):
                        data = query.data.split()
                        chData = data[1]
                        keyboard = [[InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é!", callback_data=f"giveaway {chData}")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        cursor.execute('UPDATE users SET raffle = 1 WHERE id = %s', (query.from_user.id,))
                        cursor.execute('UPDATE raffles SET participants = participants + 1 WHERE id = %s', (chData,))
                        conn.commit()
                        query.answer('–¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', show_alert=True)
                        logger.info(f'New raffle participant: {query.from_user.full_name}')
                        cursor.execute('SELECT participants, date_end, chat_id, message_id FROM raffles WHERE id = %s', (chData,))
                        info = cursor.fetchone()
                        pNum = info[0]
                        date = info[1]
                        chID = int(info[2])
                        mID = int(info[3])
                        context.bot.edit_message_text(chat_id=chID, message_id=mID, text=f'...\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã {date}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {pNum}', reply_markup=reply_markup)
                    else:
                        query.answer('–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üôÉ', show_alert=True)
                        logger.info(f'Raffle denied: {query.from_user.full_name}')
                else:
                    query.answer('–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(-–∞) –Ω–∞ @theclownfiesta!', show_alert=True)
            else:
                    query.answer('–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!', show_alert=True)
        else:
            query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', show_alert=True)
    else:
        query.answer('–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –∑–∞–±–∞–Ω–µ–Ω(-–∞).', show_alert=True)


def echo(update, context):
    try:
        cur_time = int(time.time())
        pidor_time = cur_time - 14400
        ids = update.message.from_user.id
        chatid = update.message.chat_id
        name = update.message.from_user.full_name
        cursor.execute('SELECT id FROM users')
        members = cursor.fetchall()
        cursor.execute('SELECT id FROM chats')
        chats = cursor.fetchall()
        if str(ids) in str(members):
            cursor.execute('UPDATE users SET name = %s, lastmsg = %s WHERE id = %s', (name, cur_time, ids,))
            conn.commit()
        else:
            registered = time.strftime('%d.%m.%y')
            cursor.execute('INSERT INTO users (id, name, lastmsg, registered) VALUES (%s, %s, %s, %s)', (ids, name, cur_time, registered,))
            conn.commit()
            logger.info(f'New user {update.message.from_user.full_name}!')
        cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
        banned = cursor.fetchone()
        if '0' in str(banned[0]):
            pass
        else:
            return
        chance = random.randint(0, 1000)
        cursor.execute('SELECT pidor_state FROM chats WHERE id = %s', (update.message.chat_id,))
        pState = cursor.fetchone()
        cursor.execute('SELECT pidor_time FROM chats WHERE id = %s', (update.message.chat_id,))
        pTime = cursor.fetchone()
        logger.info(f'Random: {chance}')
        if (chance <= 5) and ('1' in str(pState[0])):
            if (pidor_time >= int(pTime[0])):
                logger.info('New pidor.')
                cursor.execute('SELECT pidor FROM users WHERE id = %s', (ids,))
                pcount = cursor.fetchone()
                if int(pcount[0]) == 0:
                    update.message.reply_text('–ï—Å—Ç—å 2 –Ω–æ–≤–æ—Å—Ç–∏:\n1. –£ —Ç–µ–±—è –±—ã–ª –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –ë–∏–ª–æ–º –ì–µ–π—Ç—Å–æ–º, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n2. –¢–µ–±—è —á–∏–ø–∏—Ä–æ–≤–∞–ª–∏.')
                else:
                    update.message.reply_text(f'Chipization time! –ü—Ä–æ—à–∏–≤–∫–∞ —Ç–≤–æ–µ–≥–æ —á–∏–ø–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —É–∂–µ {int(pcount[0])+1} —Ä–∞–∑.')
                cursor.execute('UPDATE users SET exp = exp + 5, pidor = pidor + 1 WHERE id = %s', (ids,))
                cursor.execute('UPDATE chats SET pidor_last = %s, pidor_time = %s, pidor_total = pidor_total + 1 WHERE id = %s', (name, cur_time, chatid,))
                context.chat_data['pidor'] = update.message.from_user.full_name
            else:
                logger.info('Almost new pidor.')
                pass
        else:
            pass
        if 'krokoword' in context.chat_data:
            msg = update.message.text
            wrd = context.chat_data['krokoword']
            message = context.chat_data['message']
            cursor.execute('SELECT state FROM games WHERE chatid = %s', (update.message.chat_id,))
            state = cursor.fetchone()
            if (msg.lower() == wrd.lower()) and (str(update.message.from_user.id) in str(context.chat_data['kroko_inv'])) and ('1' in str(state[0])):
                context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                update.message.reply_text('–¢—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫ –∏–≥—Ä–∞—Ç—å –Ω–µ —á–µ—Å—Ç–Ω–æ?\n–ú–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ 50 –º–æ–Ω–µ—Ç –∏ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É.\n\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                cursor.execute('UPDATE users SET exp = exp - 50 WHERE id = %s', (ids,))
                cursor.execute('UPDATE games SET state = 0 WHERE chatid = %s', (chatid,))
                job = context.chat_data['kroko_job']
                job.enabled=False
                job.schedule_removal()
                del context.chat_data['krokoword']
                del context.chat_data['kroko_job']
                del context.chat_data['kroko_inv']
                del context.chat_data['kroko_iname']
                del context.chat_data['message']
            elif (msg.lower() == wrd.lower()) and (str(update.message.from_user.id) not in str(context.chat_data['kroko_inv'])) and ('1' in str(state[0])):
                member = context.bot.get_chat_member(channel_username, ids)
                if member.status in memberslist:
                    krokoWin = 10
                else:
                    krokoWin = 5
                update.message.reply_text(f'–¢—ã —É–≥–∞–¥–∞–ª(-–∞)! –î–µ—Ä–∂–∏ {krokoWin} –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                cursor.execute('UPDATE users SET exp = exp + %s WHERE id = %s', (krokoWin, ids,))
                cursor.execute('UPDATE games SET state = 0 WHERE chatid = %s', (chatid,))
                job = context.chat_data['kroko_job']
                job.enabled=False
                job.schedule_removal()
                del context.chat_data['krokoword']
                del context.chat_data['kroko_job']
                del context.chat_data['kroko_inv']
                del context.chat_data['kroko_iname']
                del context.chat_data['message']
            elif (msg.lower() == wrd.lower()) and (str(update.message.from_user.id) not in str(context.chat_data['kroko_inv'])) and ('1' not in str(state[0])):
                update.message.reply_text('–¢—ã —É–≥–∞–¥–∞–ª(-–∞)! –¢–æ–ª—å–∫–æ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å:(\n\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                context.bot.edit_message_text(chat_id=message.chat_id, message_id=message.message_id, text='–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /krokodil')
                del context.chat_data['krokoword']
                del context.chat_data['kroko_job']
                del context.chat_data['kroko_inv']
                del context.chat_data['kroko_iname']
                del context.chat_data['message']
            else:
                pass
        else:
            pass
        cursor.execute('UPDATE chats SET messages = messages + 1 WHERE id = %s', (update.message.chat_id,))
        conn.commit()
    except AttributeError as error:
        return
    except:
        pass


# def gop(update, context):
#     try:
#         target = update.message.reply_to_message.from_user.id
#         ids = update.message.from_user.id
#         cursor.execute('SELECT id FROM users')
#         members = cursor.fetchall()
#         if (str(ids) in str(members)) and (str(target) in str(members)):
#             user_says = context.args[0]
#             try:
#                 amount = int(user_says)
#             except:
#                 return
#             ids = update.message.from_user.id
#             cursor.execute('SELECT exp FROM users WHERE id = %s', (ids,))
#             balance = cursor.fetchone()
#             exp = int(balance[0])
#             gMin = 10
#             gMax = exp*2
#             risk = amount/gMax*1000
#             result = random.randint(0, 1100)
#             if result > risk:
#     except:
#         update.message.reply_text('–û—à–∏–±–∫–∞! –£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Å—è, —á—Ç–æ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –Ω–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–ø.')


def qHelp(update, context):
    cursor.execute('SELECT banned FROM users WHERE id = %s', (update.message.from_user.id,))
    banned = cursor.fetchone()
    if '0' in str(banned[0]):
        update.message.reply_text('''–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

/krokodil - –ò–≥—Ä–∞ –≤ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ.
/chipization - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —Å—Ç–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –∂–µ—Ä—Ç–≤–æ–π –ë–∏–ª–∞ –ì–µ–π—Ç—Å–∞.
/chipization_toggle - –í–∫–ª./–í—ã–∫–ª. (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞)
/nya - –ö–æ—Ç–∏–∫–∏ –∏ –¥—Ä—É–≥–∞—è –∂–∏–≤–Ω–æ—Å—Ç—å.
/memepls - –ú–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
/fbi - –ù–∞ —Å–ª—É—á–∞–π –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.
/balance - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å.

/tip <SUMM> - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω–µ–∂–∫—É (–ü–∏—à–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è).
/bet <SUMM> - –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.

–í–º–µ—Å—Ç–æ <SUMM> —É–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000 (1.000.000 –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ @theclownfiesta).''')
        logger.info('Help requested')
    else:
        pass


def freecoins(update, context):
    update.message.reply_text('''1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @osuzhdaiu: 1000 –º–æ–Ω–µ—Ç.
<a href="https://t.me/clownfiestabot?start=osuzhdaiu">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</a>

2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @theclownfiesta: 1000 –º–æ–Ω–µ—Ç + –ø–æ–≤—ã—à–µ–Ω—ã–π –ª–∏–º–∏—Ç (–¥–æ 10–∫) –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Å—Ç–∞–≤–∫–∏.
<a href="https://t.me/clownfiestabot?start=theclownfiesta">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</a>

3. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @mem_hunter: 1000 –º–æ–Ω–µ—Ç.
<a href="https://t.me/clownfiestabot?start=mem_hunter">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</a>

4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ @nvmrstuff: 1000 –º–æ–Ω–µ—Ç.
<a href="https://t.me/clownfiestabot?start=nvmrstuff">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</a>''', parse_mode='HTML', disable_web_page_preview=True)


def substats(update, context):
    cursor.execute('SELECT COUNT(DISTINCT vt), COUNT(DISTINCT thecf), COUNT(DISTINCT mh), COUNT(DISTINCT nvmr) FROM users')
    subs = cursor.fetchone()
    update.message.reply_text(f'–ö–æ–ª-–≤–æ –ø—Ä–∏–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n@osuzhdaiu: {subs[0]}\n@theclownfiesta: {subs[1]}\n@mem_hunter: {subs[2]}\n@nvmrstuff: {subs[3]}', parse_mode='HTML', disable_web_page_preview=True)


def donate(update, context):
    update.message.reply_text('–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–∞:\n–°–±–µ—Ä: 5469 3800 8674 8745\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ–π UserID –∫ –¥–æ–Ω–∞—Ç—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 10.000 –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 10 —Ä—É–±. –¥–æ–Ω–∞—Ç–∞ :)\n–í–∞–∂–Ω–æ! –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.')
    update.message.reply_text(f'–¢–≤–æ–π UserID: {update.message.from_user.id}')


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary

    # updater = Updater('1231333868:AAHiPBXYKNgoHpBTeGbxb2mwe2aBm9hToeI', use_context=True)
    updater = Updater(os.environ['token'], use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher
    j = updater.job_queue
    j.run_repeating(set_exp, interval=600, first=0)
    j.run_once(krokoreload, 1)

    # log all errors
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, new_user))
    dp.add_handler(CommandHandler('raffle', raffle, filters=(Filters.user(username="@daaetoya"))))
    dp.add_handler(CommandHandler('winners', raffleWinners, filters=Filters.user(username="@daaetoya")))
    dp.add_handler(CommandHandler('krokodil', krokodil, pass_job_queue=True, pass_chat_data=True))
    dp.add_handler(CommandHandler('chipization', pidor))
    dp.add_handler(CommandHandler('chipization_toggle', pidor_toggle))
    dp.add_handler(CommandHandler('fbi', fbi))
    dp.add_handler(CommandHandler('donate', donate))
    dp.add_handler(CommandHandler('nya', showPussy))
    dp.add_handler(CommandHandler('memepls', showMemes))
    dp.add_handler(CommandHandler('osuzhdaiu', showTwitch))
    dp.add_handler(CommandHandler('balance', babki))
    dp.add_handler(CommandHandler('stats', stats))
    dp.add_handler(CommandHandler('ban', ban))
    dp.add_handler(CommandHandler('gay', gay))
    dp.add_handler(CommandHandler('chlen', chlen))
    dp.add_handler(CommandHandler('unban', unban))
    dp.add_handler(CommandHandler('freecoins', freecoins))
    dp.add_handler(CommandHandler('substats', substats, filters=Filters.user(username="@daaetoya")))
    dp.add_handler(CommandHandler('message', message))
    dp.add_handler(MessageHandler((Filters.dice & (~Filters.forwarded)), bets))
    # dp.add_handler(MessageHandler((Filters.dice & (~Filters.forwarded)), bets_soon))
    dp.add_handler(CommandHandler('bet', setBet, pass_args=True))
    dp.add_handler(CommandHandler('tip', tip, pass_args=True))
    dp.add_handler(CommandHandler('help', qHelp))
    dp.add_handler(InlineQueryHandler(checkquery))
    # dp.add_handler(CommandHandler("gop", gop, pass_args=True))
    dp.add_handler(MessageHandler(Filters.group, echo))
    dp.add_handler(MessageHandler((Filters.photo | Filters.document) & (~Filters.group) & (Filters.user(username="@bhyout") | Filters.user(username="@sslte")), pussy))
    dp.add_handler(MessageHandler((Filters.photo | Filters.document) & (~Filters.group) & (Filters.user(username="@balak_in") | Filters.user(username="@aotkh")), memes))
    dp.add_handler(MessageHandler(Filters.video & (~Filters.group) & Filters.user(username="@daaetoya"), twitch))
    dp.add_handler(MessageHandler(Filters.document & (~Filters.group) & Filters.user(username="@daaetoya"), hGif))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
